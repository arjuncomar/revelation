#include <opencv2/opencv.hpp>
#include <vector>
#include <opencv2/core/core.hpp>
#include <opencv2/flann/miniflann.hpp>
#include <opencv2/ml/ml.hpp>
#include <opencv2/imgproc/imgproc.hpp>
#include <opencv2/calib3d/calib3d.hpp>
#include <opencv2/features2d/features2d.hpp>
#include <opencv2/video/tracking.hpp>
#include <opencv2/video/background_segm.hpp>
#include <opencv2/objdetect/objdetect.hpp>
#include <opencv2/contrib/contrib.hpp>
#include <opencv2/highgui/highgui.hpp>
#ifndef __OPENCV_GENERATED_HPP
#define __OPENCV_GENERATED_HPP
using namespace cv;
using namespace std;
using namespace flann;
using namespace cvflann;
extern "C" {
typedef char* c_string;
typedef SimpleBlobDetector::Params Params;
typedef SimpleBlobDetector::Params SimpleBlobDetector_Params;
typedef flann_algorithm_t cvflann_flann_algorithm_t;
typedef flann_distance_t cvflann_flann_distance_t;
typedef IndexParams flann_IndexParams;
typedef SearchParams flann_SearchParams;
typedef vector<DMatch> vector_DMatch;
typedef vector<KeyPoint> vector_KeyPoint;
typedef vector<Mat> vector_Mat;
typedef vector<Point> vector_Point;
typedef vector<Point2f> vector_Point2f;
typedef vector<Rect> vector_Rect;
typedef vector<Vec4f> vector_Vec4f;
typedef vector<Vec6f> vector_Vec6f;
typedef vector<double> vector_double;
typedef vector<float> vector_float;
typedef vector<int> vector_int;
typedef vector<string> vector_string;
typedef vector<uchar> vector_uchar;
typedef vector<vector<DMatch> > vector_vector_DMatch;
typedef vector<vector<Point> > vector_vector_Point;
typedef vector<vector<Point2f> > vector_vector_Point2f;
#define CV_ADAPTIVESKINDETECTOR_MORPHING_METHOD_ERODE0 CvAdaptiveSkinDetector::MORPHING_METHOD_ERODE
#define CV_ADAPTIVESKINDETECTOR_MORPHING_METHOD_ERODE_DILATE0 CvAdaptiveSkinDetector::MORPHING_METHOD_ERODE_DILATE
#define CV_ADAPTIVESKINDETECTOR_MORPHING_METHOD_ERODE_ERODE0 CvAdaptiveSkinDetector::MORPHING_METHOD_ERODE_ERODE
#define CV_ADAPTIVESKINDETECTOR_MORPHING_METHOD_NONE0 CvAdaptiveSkinDetector::MORPHING_METHOD_NONE
#define CV_ADAPTIVE_THRESH_GAUSSIAN_C0 cv::ADAPTIVE_THRESH_GAUSSIAN_C
#define CV_ADAPTIVE_THRESH_MEAN_C0 cv::ADAPTIVE_THRESH_MEAN_C
#define CV_ANN_MLP_GAUSSIAN0 CvANN_MLP::GAUSSIAN
#define CV_ANN_MLP_IDENTITY0 CvANN_MLP::IDENTITY
#define CV_ANN_MLP_NO_INPUT_SCALE0 CvANN_MLP::NO_INPUT_SCALE
#define CV_ANN_MLP_NO_OUTPUT_SCALE0 CvANN_MLP::NO_OUTPUT_SCALE
#define CV_ANN_MLP_SIGMOID_SYM0 CvANN_MLP::SIGMOID_SYM
#define CV_ANN_MLP_TRAINPARAMS_BACKPROP0 CvANN_MLP_TrainParams::BACKPROP
#define CV_ANN_MLP_TRAINPARAMS_RPROP0 CvANN_MLP_TrainParams::RPROP
#define CV_ANN_MLP_UPDATE_WEIGHTS0 CvANN_MLP::UPDATE_WEIGHTS
#define CV_BOOST_DEFAULT0 CvBoost::DEFAULT
#define CV_BOOST_DISCRETE0 CvBoost::DISCRETE
#define CV_BOOST_GENTLE0 CvBoost::GENTLE
#define CV_BOOST_GINI0 CvBoost::GINI
#define CV_BOOST_LOGIT0 CvBoost::LOGIT
#define CV_BOOST_MISCLASS0 CvBoost::MISCLASS
#define CV_BOOST_REAL0 CvBoost::REAL
#define CV_BOOST_SQERR0 CvBoost::SQERR
#define CV_BORDER_CONSTANT0 cv::BORDER_CONSTANT
#define CV_BORDER_DEFAULT0 cv::BORDER_DEFAULT
#define CV_BORDER_ISOLATED0 cv::BORDER_ISOLATED
#define CV_BORDER_REFLECT0 cv::BORDER_REFLECT
#define CV_BORDER_REFLECT1010 cv::BORDER_REFLECT101
#define CV_BORDER_REFLECT_1010 cv::BORDER_REFLECT_101
#define CV_BORDER_REPLICATE0 cv::BORDER_REPLICATE
#define CV_BORDER_TRANSPARENT0 cv::BORDER_TRANSPARENT
#define CV_BORDER_WRAP0 cv::BORDER_WRAP
#define CV_CALIB_CB_ADAPTIVE_THRESH0 cv::CALIB_CB_ADAPTIVE_THRESH
#define CV_CALIB_CB_ASYMMETRIC_GRID0 cv::CALIB_CB_ASYMMETRIC_GRID
#define CV_CALIB_CB_CLUSTERING0 cv::CALIB_CB_CLUSTERING
#define CV_CALIB_CB_FAST_CHECK0 cv::CALIB_CB_FAST_CHECK
#define CV_CALIB_CB_FILTER_QUADS0 cv::CALIB_CB_FILTER_QUADS
#define CV_CALIB_CB_NORMALIZE_IMAGE0 cv::CALIB_CB_NORMALIZE_IMAGE
#define CV_CALIB_CB_SYMMETRIC_GRID0 cv::CALIB_CB_SYMMETRIC_GRID
#define CV_CALIB_FIX_ASPECT_RATIO0 cv::CALIB_FIX_ASPECT_RATIO
#define CV_CALIB_FIX_FOCAL_LENGTH0 cv::CALIB_FIX_FOCAL_LENGTH
#define CV_CALIB_FIX_INTRINSIC0 cv::CALIB_FIX_INTRINSIC
#define CV_CALIB_FIX_K10 cv::CALIB_FIX_K1
#define CV_CALIB_FIX_K20 cv::CALIB_FIX_K2
#define CV_CALIB_FIX_K30 cv::CALIB_FIX_K3
#define CV_CALIB_FIX_K40 cv::CALIB_FIX_K4
#define CV_CALIB_FIX_K50 cv::CALIB_FIX_K5
#define CV_CALIB_FIX_K60 cv::CALIB_FIX_K6
#define CV_CALIB_FIX_PRINCIPAL_POINT0 cv::CALIB_FIX_PRINCIPAL_POINT
#define CV_CALIB_RATIONAL_MODEL0 cv::CALIB_RATIONAL_MODEL
#define CV_CALIB_SAME_FOCAL_LENGTH0 cv::CALIB_SAME_FOCAL_LENGTH
#define CV_CALIB_USE_INTRINSIC_GUESS0 cv::CALIB_USE_INTRINSIC_GUESS
#define CV_CALIB_ZERO_DISPARITY0 cv::CALIB_ZERO_DISPARITY
#define CV_CALIB_ZERO_TANGENT_DIST0 cv::CALIB_ZERO_TANGENT_DIST
#define CV_CASCADE_DO_CANNY_PRUNING0 cv::CASCADE_DO_CANNY_PRUNING
#define CV_CASCADE_DO_ROUGH_SEARCH0 cv::CASCADE_DO_ROUGH_SEARCH
#define CV_CASCADE_FIND_BIGGEST_OBJECT0 cv::CASCADE_FIND_BIGGEST_OBJECT
#define CV_CASCADE_SCALE_IMAGE0 cv::CASCADE_SCALE_IMAGE
#define CV_CHAIN_APPROX_NONE0 cv::CHAIN_APPROX_NONE
#define CV_CHAIN_APPROX_SIMPLE0 cv::CHAIN_APPROX_SIMPLE
#define CV_CHAIN_APPROX_TC89_KCOS0 cv::CHAIN_APPROX_TC89_KCOS
#define CV_CHAIN_APPROX_TC89_L10 cv::CHAIN_APPROX_TC89_L1
#define CV_CMP_EQ0 cv::CMP_EQ
#define CV_CMP_GE0 cv::CMP_GE
#define CV_CMP_GT0 cv::CMP_GT
#define CV_CMP_LE0 cv::CMP_LE
#define CV_CMP_LT0 cv::CMP_LT
#define CV_CMP_NE0 cv::CMP_NE
#define CV_COLORMAP_AUTUMN0 cv::COLORMAP_AUTUMN
#define CV_COLORMAP_BONE0 cv::COLORMAP_BONE
#define CV_COLORMAP_COOL0 cv::COLORMAP_COOL
#define CV_COLORMAP_HOT0 cv::COLORMAP_HOT
#define CV_COLORMAP_HSV0 cv::COLORMAP_HSV
#define CV_COLORMAP_JET0 cv::COLORMAP_JET
#define CV_COLORMAP_OCEAN0 cv::COLORMAP_OCEAN
#define CV_COLORMAP_PINK0 cv::COLORMAP_PINK
#define CV_COLORMAP_RAINBOW0 cv::COLORMAP_RAINBOW
#define CV_COLORMAP_SPRING0 cv::COLORMAP_SPRING
#define CV_COLORMAP_SUMMER0 cv::COLORMAP_SUMMER
#define CV_COLORMAP_WINTER0 cv::COLORMAP_WINTER
#define CV_COLOR_BAYERBG2BGR0 cv::COLOR_BayerBG2BGR
#define CV_COLOR_BAYERBG2BGR_VNG0 cv::COLOR_BayerBG2BGR_VNG
#define CV_COLOR_BAYERBG2GRAY0 cv::COLOR_BayerBG2GRAY
#define CV_COLOR_BAYERBG2RGB0 cv::COLOR_BayerBG2RGB
#define CV_COLOR_BAYERBG2RGB_VNG0 cv::COLOR_BayerBG2RGB_VNG
#define CV_COLOR_BAYERGB2BGR0 cv::COLOR_BayerGB2BGR
#define CV_COLOR_BAYERGB2BGR_VNG0 cv::COLOR_BayerGB2BGR_VNG
#define CV_COLOR_BAYERGB2GRAY0 cv::COLOR_BayerGB2GRAY
#define CV_COLOR_BAYERGB2RGB0 cv::COLOR_BayerGB2RGB
#define CV_COLOR_BAYERGB2RGB_VNG0 cv::COLOR_BayerGB2RGB_VNG
#define CV_COLOR_BAYERGR2BGR0 cv::COLOR_BayerGR2BGR
#define CV_COLOR_BAYERGR2BGR_VNG0 cv::COLOR_BayerGR2BGR_VNG
#define CV_COLOR_BAYERGR2GRAY0 cv::COLOR_BayerGR2GRAY
#define CV_COLOR_BAYERGR2RGB0 cv::COLOR_BayerGR2RGB
#define CV_COLOR_BAYERGR2RGB_VNG0 cv::COLOR_BayerGR2RGB_VNG
#define CV_COLOR_BAYERRG2BGR0 cv::COLOR_BayerRG2BGR
#define CV_COLOR_BAYERRG2BGR_VNG0 cv::COLOR_BayerRG2BGR_VNG
#define CV_COLOR_BAYERRG2GRAY0 cv::COLOR_BayerRG2GRAY
#define CV_COLOR_BAYERRG2RGB0 cv::COLOR_BayerRG2RGB
#define CV_COLOR_BAYERRG2RGB_VNG0 cv::COLOR_BayerRG2RGB_VNG
#define CV_COLOR_BGR2BGR5550 cv::COLOR_BGR2BGR555
#define CV_COLOR_BGR2BGR5650 cv::COLOR_BGR2BGR565
#define CV_COLOR_BGR2BGRA0 cv::COLOR_BGR2BGRA
#define CV_COLOR_BGR2GRAY0 cv::COLOR_BGR2GRAY
#define CV_COLOR_BGR2HLS0 cv::COLOR_BGR2HLS
#define CV_COLOR_BGR2HLS_FULL0 cv::COLOR_BGR2HLS_FULL
#define CV_COLOR_BGR2HSV0 cv::COLOR_BGR2HSV
#define CV_COLOR_BGR2HSV_FULL0 cv::COLOR_BGR2HSV_FULL
#define CV_COLOR_BGR2LAB0 cv::COLOR_BGR2Lab
#define CV_COLOR_BGR2LUV0 cv::COLOR_BGR2Luv
#define CV_COLOR_BGR2RGB0 cv::COLOR_BGR2RGB
#define CV_COLOR_BGR2RGBA0 cv::COLOR_BGR2RGBA
#define CV_COLOR_BGR2XYZ0 cv::COLOR_BGR2XYZ
#define CV_COLOR_BGR2YCRCB0 cv::COLOR_BGR2YCrCb
#define CV_COLOR_BGR2YUV0 cv::COLOR_BGR2YUV
#define CV_COLOR_BGR2YUV_I4200 cv::COLOR_BGR2YUV_I420
#define CV_COLOR_BGR2YUV_IYUV0 cv::COLOR_BGR2YUV_IYUV
#define CV_COLOR_BGR2YUV_YV120 cv::COLOR_BGR2YUV_YV12
#define CV_COLOR_BGR5552BGR0 cv::COLOR_BGR5552BGR
#define CV_COLOR_BGR5552BGRA0 cv::COLOR_BGR5552BGRA
#define CV_COLOR_BGR5552GRAY0 cv::COLOR_BGR5552GRAY
#define CV_COLOR_BGR5552RGB0 cv::COLOR_BGR5552RGB
#define CV_COLOR_BGR5552RGBA0 cv::COLOR_BGR5552RGBA
#define CV_COLOR_BGR5652BGR0 cv::COLOR_BGR5652BGR
#define CV_COLOR_BGR5652BGRA0 cv::COLOR_BGR5652BGRA
#define CV_COLOR_BGR5652GRAY0 cv::COLOR_BGR5652GRAY
#define CV_COLOR_BGR5652RGB0 cv::COLOR_BGR5652RGB
#define CV_COLOR_BGR5652RGBA0 cv::COLOR_BGR5652RGBA
#define CV_COLOR_BGRA2BGR0 cv::COLOR_BGRA2BGR
#define CV_COLOR_BGRA2BGR5550 cv::COLOR_BGRA2BGR555
#define CV_COLOR_BGRA2BGR5650 cv::COLOR_BGRA2BGR565
#define CV_COLOR_BGRA2GRAY0 cv::COLOR_BGRA2GRAY
#define CV_COLOR_BGRA2RGB0 cv::COLOR_BGRA2RGB
#define CV_COLOR_BGRA2RGBA0 cv::COLOR_BGRA2RGBA
#define CV_COLOR_BGRA2YUV_I4200 cv::COLOR_BGRA2YUV_I420
#define CV_COLOR_BGRA2YUV_IYUV0 cv::COLOR_BGRA2YUV_IYUV
#define CV_COLOR_BGRA2YUV_YV120 cv::COLOR_BGRA2YUV_YV12
#define CV_COLOR_COLORCVT_MAX0 cv::COLOR_COLORCVT_MAX
#define CV_COLOR_GRAY2BGR0 cv::COLOR_GRAY2BGR
#define CV_COLOR_GRAY2BGR5550 cv::COLOR_GRAY2BGR555
#define CV_COLOR_GRAY2BGR5650 cv::COLOR_GRAY2BGR565
#define CV_COLOR_GRAY2BGRA0 cv::COLOR_GRAY2BGRA
#define CV_COLOR_GRAY2RGB0 cv::COLOR_GRAY2RGB
#define CV_COLOR_GRAY2RGBA0 cv::COLOR_GRAY2RGBA
#define CV_COLOR_HLS2BGR0 cv::COLOR_HLS2BGR
#define CV_COLOR_HLS2BGR_FULL0 cv::COLOR_HLS2BGR_FULL
#define CV_COLOR_HLS2RGB0 cv::COLOR_HLS2RGB
#define CV_COLOR_HLS2RGB_FULL0 cv::COLOR_HLS2RGB_FULL
#define CV_COLOR_HSV2BGR0 cv::COLOR_HSV2BGR
#define CV_COLOR_HSV2BGR_FULL0 cv::COLOR_HSV2BGR_FULL
#define CV_COLOR_HSV2RGB0 cv::COLOR_HSV2RGB
#define CV_COLOR_HSV2RGB_FULL0 cv::COLOR_HSV2RGB_FULL
#define CV_COLOR_LAB2BGR0 cv::COLOR_Lab2BGR
#define CV_COLOR_LAB2LBGR0 cv::COLOR_Lab2LBGR
#define CV_COLOR_LAB2LRGB0 cv::COLOR_Lab2LRGB
#define CV_COLOR_LAB2RGB0 cv::COLOR_Lab2RGB
#define CV_COLOR_LBGR2LAB0 cv::COLOR_LBGR2Lab
#define CV_COLOR_LBGR2LUV0 cv::COLOR_LBGR2Luv
#define CV_COLOR_LRGB2LAB0 cv::COLOR_LRGB2Lab
#define CV_COLOR_LRGB2LUV0 cv::COLOR_LRGB2Luv
#define CV_COLOR_LUV2BGR0 cv::COLOR_Luv2BGR
#define CV_COLOR_LUV2LBGR0 cv::COLOR_Luv2LBGR
#define CV_COLOR_LUV2LRGB0 cv::COLOR_Luv2LRGB
#define CV_COLOR_LUV2RGB0 cv::COLOR_Luv2RGB
#define CV_COLOR_MRGBA2RGBA0 cv::COLOR_mRGBA2RGBA
#define CV_COLOR_RGB2BGR0 cv::COLOR_RGB2BGR
#define CV_COLOR_RGB2BGR5550 cv::COLOR_RGB2BGR555
#define CV_COLOR_RGB2BGR5650 cv::COLOR_RGB2BGR565
#define CV_COLOR_RGB2BGRA0 cv::COLOR_RGB2BGRA
#define CV_COLOR_RGB2GRAY0 cv::COLOR_RGB2GRAY
#define CV_COLOR_RGB2HLS0 cv::COLOR_RGB2HLS
#define CV_COLOR_RGB2HLS_FULL0 cv::COLOR_RGB2HLS_FULL
#define CV_COLOR_RGB2HSV0 cv::COLOR_RGB2HSV
#define CV_COLOR_RGB2HSV_FULL0 cv::COLOR_RGB2HSV_FULL
#define CV_COLOR_RGB2LAB0 cv::COLOR_RGB2Lab
#define CV_COLOR_RGB2LUV0 cv::COLOR_RGB2Luv
#define CV_COLOR_RGB2RGBA0 cv::COLOR_RGB2RGBA
#define CV_COLOR_RGB2XYZ0 cv::COLOR_RGB2XYZ
#define CV_COLOR_RGB2YCRCB0 cv::COLOR_RGB2YCrCb
#define CV_COLOR_RGB2YUV0 cv::COLOR_RGB2YUV
#define CV_COLOR_RGB2YUV_I4200 cv::COLOR_RGB2YUV_I420
#define CV_COLOR_RGB2YUV_IYUV0 cv::COLOR_RGB2YUV_IYUV
#define CV_COLOR_RGB2YUV_YV120 cv::COLOR_RGB2YUV_YV12
#define CV_COLOR_RGBA2BGR0 cv::COLOR_RGBA2BGR
#define CV_COLOR_RGBA2BGR5550 cv::COLOR_RGBA2BGR555
#define CV_COLOR_RGBA2BGR5650 cv::COLOR_RGBA2BGR565
#define CV_COLOR_RGBA2BGRA0 cv::COLOR_RGBA2BGRA
#define CV_COLOR_RGBA2GRAY0 cv::COLOR_RGBA2GRAY
#define CV_COLOR_RGBA2MRGBA0 cv::COLOR_RGBA2mRGBA
#define CV_COLOR_RGBA2RGB0 cv::COLOR_RGBA2RGB
#define CV_COLOR_RGBA2YUV_I4200 cv::COLOR_RGBA2YUV_I420
#define CV_COLOR_RGBA2YUV_IYUV0 cv::COLOR_RGBA2YUV_IYUV
#define CV_COLOR_RGBA2YUV_YV120 cv::COLOR_RGBA2YUV_YV12
#define CV_COLOR_XYZ2BGR0 cv::COLOR_XYZ2BGR
#define CV_COLOR_XYZ2RGB0 cv::COLOR_XYZ2RGB
#define CV_COLOR_YCRCB2BGR0 cv::COLOR_YCrCb2BGR
#define CV_COLOR_YCRCB2RGB0 cv::COLOR_YCrCb2RGB
#define CV_COLOR_YUV2BGR0 cv::COLOR_YUV2BGR
#define CV_COLOR_YUV2BGRA_I4200 cv::COLOR_YUV2BGRA_I420
#define CV_COLOR_YUV2BGRA_IYUV0 cv::COLOR_YUV2BGRA_IYUV
#define CV_COLOR_YUV2BGRA_NV120 cv::COLOR_YUV2BGRA_NV12
#define CV_COLOR_YUV2BGRA_NV210 cv::COLOR_YUV2BGRA_NV21
#define CV_COLOR_YUV2BGRA_UYNV0 cv::COLOR_YUV2BGRA_UYNV
#define CV_COLOR_YUV2BGRA_UYVY0 cv::COLOR_YUV2BGRA_UYVY
#define CV_COLOR_YUV2BGRA_Y4220 cv::COLOR_YUV2BGRA_Y422
#define CV_COLOR_YUV2BGRA_YUNV0 cv::COLOR_YUV2BGRA_YUNV
#define CV_COLOR_YUV2BGRA_YUY20 cv::COLOR_YUV2BGRA_YUY2
#define CV_COLOR_YUV2BGRA_YUYV0 cv::COLOR_YUV2BGRA_YUYV
#define CV_COLOR_YUV2BGRA_YV120 cv::COLOR_YUV2BGRA_YV12
#define CV_COLOR_YUV2BGRA_YVYU0 cv::COLOR_YUV2BGRA_YVYU
#define CV_COLOR_YUV2BGR_I4200 cv::COLOR_YUV2BGR_I420
#define CV_COLOR_YUV2BGR_IYUV0 cv::COLOR_YUV2BGR_IYUV
#define CV_COLOR_YUV2BGR_NV120 cv::COLOR_YUV2BGR_NV12
#define CV_COLOR_YUV2BGR_NV210 cv::COLOR_YUV2BGR_NV21
#define CV_COLOR_YUV2BGR_UYNV0 cv::COLOR_YUV2BGR_UYNV
#define CV_COLOR_YUV2BGR_UYVY0 cv::COLOR_YUV2BGR_UYVY
#define CV_COLOR_YUV2BGR_Y4220 cv::COLOR_YUV2BGR_Y422
#define CV_COLOR_YUV2BGR_YUNV0 cv::COLOR_YUV2BGR_YUNV
#define CV_COLOR_YUV2BGR_YUY20 cv::COLOR_YUV2BGR_YUY2
#define CV_COLOR_YUV2BGR_YUYV0 cv::COLOR_YUV2BGR_YUYV
#define CV_COLOR_YUV2BGR_YV120 cv::COLOR_YUV2BGR_YV12
#define CV_COLOR_YUV2BGR_YVYU0 cv::COLOR_YUV2BGR_YVYU
#define CV_COLOR_YUV2GRAY_4200 cv::COLOR_YUV2GRAY_420
#define CV_COLOR_YUV2GRAY_I4200 cv::COLOR_YUV2GRAY_I420
#define CV_COLOR_YUV2GRAY_IYUV0 cv::COLOR_YUV2GRAY_IYUV
#define CV_COLOR_YUV2GRAY_NV120 cv::COLOR_YUV2GRAY_NV12
#define CV_COLOR_YUV2GRAY_NV210 cv::COLOR_YUV2GRAY_NV21
#define CV_COLOR_YUV2GRAY_UYNV0 cv::COLOR_YUV2GRAY_UYNV
#define CV_COLOR_YUV2GRAY_UYVY0 cv::COLOR_YUV2GRAY_UYVY
#define CV_COLOR_YUV2GRAY_Y4220 cv::COLOR_YUV2GRAY_Y422
#define CV_COLOR_YUV2GRAY_YUNV0 cv::COLOR_YUV2GRAY_YUNV
#define CV_COLOR_YUV2GRAY_YUY20 cv::COLOR_YUV2GRAY_YUY2
#define CV_COLOR_YUV2GRAY_YUYV0 cv::COLOR_YUV2GRAY_YUYV
#define CV_COLOR_YUV2GRAY_YV120 cv::COLOR_YUV2GRAY_YV12
#define CV_COLOR_YUV2GRAY_YVYU0 cv::COLOR_YUV2GRAY_YVYU
#define CV_COLOR_YUV2RGB0 cv::COLOR_YUV2RGB
#define CV_COLOR_YUV2RGBA_I4200 cv::COLOR_YUV2RGBA_I420
#define CV_COLOR_YUV2RGBA_IYUV0 cv::COLOR_YUV2RGBA_IYUV
#define CV_COLOR_YUV2RGBA_NV120 cv::COLOR_YUV2RGBA_NV12
#define CV_COLOR_YUV2RGBA_NV210 cv::COLOR_YUV2RGBA_NV21
#define CV_COLOR_YUV2RGBA_UYNV0 cv::COLOR_YUV2RGBA_UYNV
#define CV_COLOR_YUV2RGBA_UYVY0 cv::COLOR_YUV2RGBA_UYVY
#define CV_COLOR_YUV2RGBA_Y4220 cv::COLOR_YUV2RGBA_Y422
#define CV_COLOR_YUV2RGBA_YUNV0 cv::COLOR_YUV2RGBA_YUNV
#define CV_COLOR_YUV2RGBA_YUY20 cv::COLOR_YUV2RGBA_YUY2
#define CV_COLOR_YUV2RGBA_YUYV0 cv::COLOR_YUV2RGBA_YUYV
#define CV_COLOR_YUV2RGBA_YV120 cv::COLOR_YUV2RGBA_YV12
#define CV_COLOR_YUV2RGBA_YVYU0 cv::COLOR_YUV2RGBA_YVYU
#define CV_COLOR_YUV2RGB_I4200 cv::COLOR_YUV2RGB_I420
#define CV_COLOR_YUV2RGB_IYUV0 cv::COLOR_YUV2RGB_IYUV
#define CV_COLOR_YUV2RGB_NV120 cv::COLOR_YUV2RGB_NV12
#define CV_COLOR_YUV2RGB_NV210 cv::COLOR_YUV2RGB_NV21
#define CV_COLOR_YUV2RGB_UYNV0 cv::COLOR_YUV2RGB_UYNV
#define CV_COLOR_YUV2RGB_UYVY0 cv::COLOR_YUV2RGB_UYVY
#define CV_COLOR_YUV2RGB_Y4220 cv::COLOR_YUV2RGB_Y422
#define CV_COLOR_YUV2RGB_YUNV0 cv::COLOR_YUV2RGB_YUNV
#define CV_COLOR_YUV2RGB_YUY20 cv::COLOR_YUV2RGB_YUY2
#define CV_COLOR_YUV2RGB_YUYV0 cv::COLOR_YUV2RGB_YUYV
#define CV_COLOR_YUV2RGB_YV120 cv::COLOR_YUV2RGB_YV12
#define CV_COLOR_YUV2RGB_YVYU0 cv::COLOR_YUV2RGB_YVYU
#define CV_COLOR_YUV420P2BGR0 cv::COLOR_YUV420p2BGR
#define CV_COLOR_YUV420P2BGRA0 cv::COLOR_YUV420p2BGRA
#define CV_COLOR_YUV420P2GRAY0 cv::COLOR_YUV420p2GRAY
#define CV_COLOR_YUV420P2RGB0 cv::COLOR_YUV420p2RGB
#define CV_COLOR_YUV420P2RGBA0 cv::COLOR_YUV420p2RGBA
#define CV_COLOR_YUV420SP2BGR0 cv::COLOR_YUV420sp2BGR
#define CV_COLOR_YUV420SP2BGRA0 cv::COLOR_YUV420sp2BGRA
#define CV_COLOR_YUV420SP2GRAY0 cv::COLOR_YUV420sp2GRAY
#define CV_COLOR_YUV420SP2RGB0 cv::COLOR_YUV420sp2RGB
#define CV_COLOR_YUV420SP2RGBA0 cv::COLOR_YUV420sp2RGBA
#define CV_COVAR_COLS0 cv::COVAR_COLS
#define CV_COVAR_NORMAL0 cv::COVAR_NORMAL
#define CV_COVAR_ROWS0 cv::COVAR_ROWS
#define CV_COVAR_SCALE0 cv::COVAR_SCALE
#define CV_COVAR_SCRAMBLED0 cv::COVAR_SCRAMBLED
#define CV_COVAR_USE_AVG0 cv::COVAR_USE_AVG
#define CV_DCT_INVERSE0 cv::DCT_INVERSE
#define CV_DCT_ROWS0 cv::DCT_ROWS
#define CV_DECOMP_CHOLESKY0 cv::DECOMP_CHOLESKY
#define CV_DECOMP_EIG0 cv::DECOMP_EIG
#define CV_DECOMP_LU0 cv::DECOMP_LU
#define CV_DECOMP_NORMAL0 cv::DECOMP_NORMAL
#define CV_DECOMP_QR0 cv::DECOMP_QR
#define CV_DECOMP_SVD0 cv::DECOMP_SVD
#define CV_DEPTH_MASK0 cv::DEPTH_MASK
#define CV_DEPTH_MASK_16S0 cv::DEPTH_MASK_16S
#define CV_DEPTH_MASK_16U0 cv::DEPTH_MASK_16U
#define CV_DEPTH_MASK_32F0 cv::DEPTH_MASK_32F
#define CV_DEPTH_MASK_32S0 cv::DEPTH_MASK_32S
#define CV_DEPTH_MASK_64F0 cv::DEPTH_MASK_64F
#define CV_DEPTH_MASK_8S0 cv::DEPTH_MASK_8S
#define CV_DEPTH_MASK_8U0 cv::DEPTH_MASK_8U
#define CV_DEPTH_MASK_ALL0 cv::DEPTH_MASK_ALL
#define CV_DEPTH_MASK_ALL_BUT_8S0 cv::DEPTH_MASK_ALL_BUT_8S
#define CV_DEPTH_MASK_FLT0 cv::DEPTH_MASK_FLT
#define CV_DFT_COMPLEX_OUTPUT0 cv::DFT_COMPLEX_OUTPUT
#define CV_DFT_INVERSE0 cv::DFT_INVERSE
#define CV_DFT_REAL_OUTPUT0 cv::DFT_REAL_OUTPUT
#define CV_DFT_ROWS0 cv::DFT_ROWS
#define CV_DFT_SCALE0 cv::DFT_SCALE
#define CV_DIST_LABEL_CCOMP0 cv::DIST_LABEL_CCOMP
#define CV_DIST_LABEL_PIXEL0 cv::DIST_LABEL_PIXEL
#define CV_DRAWMATCHESFLAGS_DEFAULT0 cv::DrawMatchesFlags::DEFAULT
#define CV_DRAWMATCHESFLAGS_DRAW_OVER_OUTIMG0 cv::DrawMatchesFlags::DRAW_OVER_OUTIMG
#define CV_DRAWMATCHESFLAGS_DRAW_RICH_KEYPOINTS0 cv::DrawMatchesFlags::DRAW_RICH_KEYPOINTS
#define CV_DRAWMATCHESFLAGS_NOT_DRAW_SINGLE_POINTS0 cv::DrawMatchesFlags::NOT_DRAW_SINGLE_POINTS
#define CV_EM_COV_MAT_DEFAULT0 cv::EM::COV_MAT_DEFAULT
#define CV_EM_COV_MAT_DIAGONAL0 cv::EM::COV_MAT_DIAGONAL
#define CV_EM_COV_MAT_GENERIC0 cv::EM::COV_MAT_GENERIC
#define CV_EM_COV_MAT_SPHERICAL0 cv::EM::COV_MAT_SPHERICAL
#define CV_EM_DEFAULT_MAX_ITERS0 cv::EM::DEFAULT_MAX_ITERS
#define CV_EM_DEFAULT_NCLUSTERS0 cv::EM::DEFAULT_NCLUSTERS
#define CV_EM_START_AUTO_STEP0 cv::EM::START_AUTO_STEP
#define CV_EM_START_E_STEP0 cv::EM::START_E_STEP
#define CV_EM_START_M_STEP0 cv::EM::START_M_STEP
#define CV_EPNP0 CV_EPNP
#define CV_EPNP1 cv::EPNP
#define CV_EVENT_FLAG_ALTKEY0 cv::EVENT_FLAG_ALTKEY
#define CV_EVENT_FLAG_CTRLKEY0 cv::EVENT_FLAG_CTRLKEY
#define CV_EVENT_FLAG_LBUTTON0 cv::EVENT_FLAG_LBUTTON
#define CV_EVENT_FLAG_MBUTTON0 cv::EVENT_FLAG_MBUTTON
#define CV_EVENT_FLAG_RBUTTON0 cv::EVENT_FLAG_RBUTTON
#define CV_EVENT_FLAG_SHIFTKEY0 cv::EVENT_FLAG_SHIFTKEY
#define CV_EVENT_LBUTTONDBLCLK0 cv::EVENT_LBUTTONDBLCLK
#define CV_EVENT_LBUTTONDOWN0 cv::EVENT_LBUTTONDOWN
#define CV_EVENT_LBUTTONUP0 cv::EVENT_LBUTTONUP
#define CV_EVENT_MBUTTONDBLCLK0 cv::EVENT_MBUTTONDBLCLK
#define CV_EVENT_MBUTTONDOWN0 cv::EVENT_MBUTTONDOWN
#define CV_EVENT_MBUTTONUP0 cv::EVENT_MBUTTONUP
#define CV_EVENT_MOUSEMOVE0 cv::EVENT_MOUSEMOVE
#define CV_EVENT_RBUTTONDBLCLK0 cv::EVENT_RBUTTONDBLCLK
#define CV_EVENT_RBUTTONDOWN0 cv::EVENT_RBUTTONDOWN
#define CV_EVENT_RBUTTONUP0 cv::EVENT_RBUTTONUP
#define CV_FASTFEATUREDETECTOR_TYPE_5_80 cv::FastFeatureDetector::TYPE_5_8
#define CV_FASTFEATUREDETECTOR_TYPE_7_120 cv::FastFeatureDetector::TYPE_7_12
#define CV_FASTFEATUREDETECTOR_TYPE_9_160 cv::FastFeatureDetector::TYPE_9_16
#define CV_FEATUREEVALUATOR_HAAR0 cv::FeatureEvaluator::HAAR
#define CV_FEATUREEVALUATOR_HOG0 cv::FeatureEvaluator::HOG
#define CV_FEATUREEVALUATOR_LBP0 cv::FeatureEvaluator::LBP
#define CV_FILENODE_EMPTY0 cv::FileNode::EMPTY
#define CV_FILENODE_FLOAT0 cv::FileNode::FLOAT
#define CV_FILENODE_FLOW0 cv::FileNode::FLOW
#define CV_FILENODE_INT0 cv::FileNode::INT
#define CV_FILENODE_MAP0 cv::FileNode::MAP
#define CV_FILENODE_NAMED0 cv::FileNode::NAMED
#define CV_FILENODE_NONE0 cv::FileNode::NONE
#define CV_FILENODE_REAL0 cv::FileNode::REAL
#define CV_FILENODE_REF0 cv::FileNode::REF
#define CV_FILENODE_SEQ0 cv::FileNode::SEQ
#define CV_FILENODE_STR0 cv::FileNode::STR
#define CV_FILENODE_STRING0 cv::FileNode::STRING
#define CV_FILENODE_TYPE_MASK0 cv::FileNode::TYPE_MASK
#define CV_FILENODE_USER0 cv::FileNode::USER
#define CV_FILESTORAGE_APPEND0 cv::FileStorage::APPEND
#define CV_FILESTORAGE_FORMAT_AUTO0 cv::FileStorage::FORMAT_AUTO
#define CV_FILESTORAGE_FORMAT_MASK0 cv::FileStorage::FORMAT_MASK
#define CV_FILESTORAGE_FORMAT_XML0 cv::FileStorage::FORMAT_XML
#define CV_FILESTORAGE_FORMAT_YAML0 cv::FileStorage::FORMAT_YAML
#define CV_FILESTORAGE_INSIDE_MAP0 cv::FileStorage::INSIDE_MAP
#define CV_FILESTORAGE_MEMORY0 cv::FileStorage::MEMORY
#define CV_FILESTORAGE_NAME_EXPECTED0 cv::FileStorage::NAME_EXPECTED
#define CV_FILESTORAGE_READ0 cv::FileStorage::READ
#define CV_FILESTORAGE_UNDEFINED0 cv::FileStorage::UNDEFINED
#define CV_FILESTORAGE_VALUE_EXPECTED0 cv::FileStorage::VALUE_EXPECTED
#define CV_FILESTORAGE_WRITE0 cv::FileStorage::WRITE
#define CV_FLOODFILL_FIXED_RANGE0 cv::FLOODFILL_FIXED_RANGE
#define CV_FLOODFILL_MASK_ONLY0 cv::FLOODFILL_MASK_ONLY
#define CV_FM_7POINT0 cv::FM_7POINT
#define CV_FM_8POINT0 cv::FM_8POINT
#define CV_FM_LMEDS0 cv::FM_LMEDS
#define CV_FM_RANSAC0 cv::FM_RANSAC
#define CV_FONT_HERSHEY_COMPLEX0 cv::FONT_HERSHEY_COMPLEX
#define CV_FONT_HERSHEY_COMPLEX_SMALL0 cv::FONT_HERSHEY_COMPLEX_SMALL
#define CV_FONT_HERSHEY_DUPLEX0 cv::FONT_HERSHEY_DUPLEX
#define CV_FONT_HERSHEY_PLAIN0 cv::FONT_HERSHEY_PLAIN
#define CV_FONT_HERSHEY_SCRIPT_COMPLEX0 cv::FONT_HERSHEY_SCRIPT_COMPLEX
#define CV_FONT_HERSHEY_SCRIPT_SIMPLEX0 cv::FONT_HERSHEY_SCRIPT_SIMPLEX
#define CV_FONT_HERSHEY_SIMPLEX0 cv::FONT_HERSHEY_SIMPLEX
#define CV_FONT_HERSHEY_TRIPLEX0 cv::FONT_HERSHEY_TRIPLEX
#define CV_FONT_ITALIC0 cv::FONT_ITALIC
#define CV_FREAK_NB_ORIENPAIRS0 cv::FREAK::NB_ORIENPAIRS
#define CV_FREAK_NB_PAIRS0 cv::FREAK::NB_PAIRS
#define CV_FREAK_NB_SCALES0 cv::FREAK::NB_SCALES
#define CV_FUZZYMEANSHIFTTRACKER_MINKERNELMASS0 CvFuzzyMeanShiftTracker::MinKernelMass
#define CV_FUZZYMEANSHIFTTRACKER_RMEDGEDENSITYFUZZY0 CvFuzzyMeanShiftTracker::rmEdgeDensityFuzzy
#define CV_FUZZYMEANSHIFTTRACKER_RMEDGEDENSITYLINEAR0 CvFuzzyMeanShiftTracker::rmEdgeDensityLinear
#define CV_FUZZYMEANSHIFTTRACKER_RMINNERDENSITY0 CvFuzzyMeanShiftTracker::rmInnerDensity
#define CV_FUZZYMEANSHIFTTRACKER_TSDISABLED0 CvFuzzyMeanShiftTracker::tsDisabled
#define CV_FUZZYMEANSHIFTTRACKER_TSNONE0 CvFuzzyMeanShiftTracker::tsNone
#define CV_FUZZYMEANSHIFTTRACKER_TSSEARCHING0 CvFuzzyMeanShiftTracker::tsSearching
#define CV_FUZZYMEANSHIFTTRACKER_TSSETWINDOW0 CvFuzzyMeanShiftTracker::tsSetWindow
#define CV_FUZZYMEANSHIFTTRACKER_TSTRACKING0 CvFuzzyMeanShiftTracker::tsTracking
#define CV_GBTREES_ABSOLUTE_LOSS0 CvGBTrees::ABSOLUTE_LOSS
#define CV_GBTREES_DEVIANCE_LOSS0 CvGBTrees::DEVIANCE_LOSS
#define CV_GBTREES_HUBER_LOSS0 CvGBTrees::HUBER_LOSS
#define CV_GBTREES_SQUARED_LOSS0 CvGBTrees::SQUARED_LOSS
#define CV_GC_BGD0 cv::GC_BGD
#define CV_GC_EVAL0 cv::GC_EVAL
#define CV_GC_FGD0 cv::GC_FGD
#define CV_GC_INIT_WITH_MASK0 cv::GC_INIT_WITH_MASK
#define CV_GC_INIT_WITH_RECT0 cv::GC_INIT_WITH_RECT
#define CV_GC_PR_BGD0 cv::GC_PR_BGD
#define CV_GC_PR_FGD0 cv::GC_PR_FGD
#define CV_GEMM_1_T0 cv::GEMM_1_T
#define CV_GEMM_2_T0 cv::GEMM_2_T
#define CV_GEMM_3_T0 cv::GEMM_3_T
#define CV_GHT_POSITION0 cv::GHT_POSITION
#define CV_GHT_ROTATION0 cv::GHT_ROTATION
#define CV_GHT_SCALE0 cv::GHT_SCALE
#define CV_HAMMING_NORMTYPE0 cv::Hamming::normType
#define CV_HOGDESCRIPTOR_DEFAULT_NLEVELS0 cv::HOGDescriptor::DEFAULT_NLEVELS
#define CV_HOGDESCRIPTOR_L2HYS0 cv::HOGDescriptor::L2Hys
#define CV_IMREAD_ANYCOLOR0 cv::IMREAD_ANYCOLOR
#define CV_IMREAD_ANYDEPTH0 cv::IMREAD_ANYDEPTH
#define CV_IMREAD_COLOR0 cv::IMREAD_COLOR
#define CV_IMREAD_GRAYSCALE0 cv::IMREAD_GRAYSCALE
#define CV_IMREAD_UNCHANGED0 cv::IMREAD_UNCHANGED
#define CV_IMWRITE_JPEG_QUALITY0 cv::IMWRITE_JPEG_QUALITY
#define CV_IMWRITE_PNG_BILEVEL0 cv::IMWRITE_PNG_BILEVEL
#define CV_IMWRITE_PNG_COMPRESSION0 cv::IMWRITE_PNG_COMPRESSION
#define CV_IMWRITE_PNG_STRATEGY0 cv::IMWRITE_PNG_STRATEGY
#define CV_IMWRITE_PNG_STRATEGY_DEFAULT0 cv::IMWRITE_PNG_STRATEGY_DEFAULT
#define CV_IMWRITE_PNG_STRATEGY_FILTERED0 cv::IMWRITE_PNG_STRATEGY_FILTERED
#define CV_IMWRITE_PNG_STRATEGY_FIXED0 cv::IMWRITE_PNG_STRATEGY_FIXED
#define CV_IMWRITE_PNG_STRATEGY_HUFFMAN_ONLY0 cv::IMWRITE_PNG_STRATEGY_HUFFMAN_ONLY
#define CV_IMWRITE_PNG_STRATEGY_RLE0 cv::IMWRITE_PNG_STRATEGY_RLE
#define CV_IMWRITE_PXM_BINARY0 cv::IMWRITE_PXM_BINARY
#define CV_INTER_AREA0 cv::INTER_AREA
#define CV_INTER_BITS0 cv::INTER_BITS
#define CV_INTER_BITS20 cv::INTER_BITS2
#define CV_INTER_CUBIC0 cv::INTER_CUBIC
#define CV_INTER_LANCZOS40 cv::INTER_LANCZOS4
#define CV_INTER_LINEAR0 cv::INTER_LINEAR
#define CV_INTER_MAX0 cv::INTER_MAX
#define CV_INTER_NEAREST0 cv::INTER_NEAREST
#define CV_INTER_TAB_SIZE0 cv::INTER_TAB_SIZE
#define CV_INTER_TAB_SIZE20 cv::INTER_TAB_SIZE2
#define CV_ITERATIVE0 CV_ITERATIVE
#define CV_ITERATIVE1 cv::ITERATIVE
#define CV_KERNEL_ASYMMETRICAL0 cv::KERNEL_ASYMMETRICAL
#define CV_KERNEL_GENERAL0 cv::KERNEL_GENERAL
#define CV_KERNEL_INTEGER0 cv::KERNEL_INTEGER
#define CV_KERNEL_SMOOTH0 cv::KERNEL_SMOOTH
#define CV_KERNEL_SYMMETRICAL0 cv::KERNEL_SYMMETRICAL
#define CV_KMEANS_PP_CENTERS0 cv::KMEANS_PP_CENTERS
#define CV_KMEANS_RANDOM_CENTERS0 cv::KMEANS_RANDOM_CENTERS
#define CV_KMEANS_USE_INITIAL_LABELS0 cv::KMEANS_USE_INITIAL_LABELS
#define CV_LEVMARQ_CALC_J0 CvLevMarq::CALC_J
#define CV_LEVMARQ_CHECK_ERR0 CvLevMarq::CHECK_ERR
#define CV_LEVMARQ_DONE0 CvLevMarq::DONE
#define CV_LEVMARQ_STARTED0 CvLevMarq::STARTED
#define CV_LMEDS0 cv::LMEDS
#define CV_MAGIC_MASK0 cv::MAGIC_MASK
#define CV_MAT_AUTO_STEP0 cv::Mat::AUTO_STEP
#define CV_MAT_CONTINUOUS_FLAG0 cv::Mat::CONTINUOUS_FLAG
#define CV_MAT_MAGIC_VAL0 cv::Mat::MAGIC_VAL
#define CV_MAT_SUBMATRIX_FLAG0 cv::Mat::SUBMATRIX_FLAG
#define CV_MORPH_BLACKHAT0 cv::MORPH_BLACKHAT
#define CV_MORPH_CLOSE0 cv::MORPH_CLOSE
#define CV_MORPH_CROSS0 cv::MORPH_CROSS
#define CV_MORPH_DILATE0 cv::MORPH_DILATE
#define CV_MORPH_ELLIPSE0 cv::MORPH_ELLIPSE
#define CV_MORPH_ERODE0 cv::MORPH_ERODE
#define CV_MORPH_GRADIENT0 cv::MORPH_GRADIENT
#define CV_MORPH_OPEN0 cv::MORPH_OPEN
#define CV_MORPH_RECT0 cv::MORPH_RECT
#define CV_MORPH_TOPHAT0 cv::MORPH_TOPHAT
#define CV_NORM_HAMMING0 cv::NORM_HAMMING
#define CV_NORM_HAMMING20 cv::NORM_HAMMING2
#define CV_NORM_INF0 cv::NORM_INF
#define CV_NORM_L10 cv::NORM_L1
#define CV_NORM_L20 cv::NORM_L2
#define CV_NORM_L2SQR0 cv::NORM_L2SQR
#define CV_NORM_MINMAX0 cv::NORM_MINMAX
#define CV_NORM_RELATIVE0 cv::NORM_RELATIVE
#define CV_NORM_TYPE_MASK0 cv::NORM_TYPE_MASK
#define CV_OPTFLOW_FARNEBACK_GAUSSIAN0 cv::OPTFLOW_FARNEBACK_GAUSSIAN
#define CV_OPTFLOW_LK_GET_MIN_EIGENVALS0 cv::OPTFLOW_LK_GET_MIN_EIGENVALS
#define CV_OPTFLOW_USE_INITIAL_FLOW0 cv::OPTFLOW_USE_INITIAL_FLOW
#define CV_ORB_FAST_SCORE0 cv::ORB::FAST_SCORE
#define CV_ORB_HARRIS_SCORE0 cv::ORB::HARRIS_SCORE
#define CV_ORB_KBYTES0 cv::ORB::kBytes
#define CV_P3P0 CV_P3P
#define CV_P3P1 cv::P3P
#define CV_PARAMGRID_SVM_C0 CvParamGrid::SVM_C
#define CV_PARAMGRID_SVM_COEF0 CvParamGrid::SVM_COEF
#define CV_PARAMGRID_SVM_DEGREE0 CvParamGrid::SVM_DEGREE
#define CV_PARAMGRID_SVM_GAMMA0 CvParamGrid::SVM_GAMMA
#define CV_PARAMGRID_SVM_NU0 CvParamGrid::SVM_NU
#define CV_PARAMGRID_SVM_P0 CvParamGrid::SVM_P
#define CV_PARAM_ALGORITHM0 cv::Param::ALGORITHM
#define CV_PARAM_BOOLEAN0 cv::Param::BOOLEAN
#define CV_PARAM_FLOAT0 cv::Param::FLOAT
#define CV_PARAM_INT0 cv::Param::INT
#define CV_PARAM_MAT0 cv::Param::MAT
#define CV_PARAM_MAT_VECTOR0 cv::Param::MAT_VECTOR
#define CV_PARAM_REAL0 cv::Param::REAL
#define CV_PARAM_SHORT0 cv::Param::SHORT
#define CV_PARAM_STRING0 cv::Param::STRING
#define CV_PARAM_UCHAR0 cv::Param::UCHAR
#define CV_PARAM_UINT640 cv::Param::UINT64
#define CV_PARAM_UNSIGNED_INT0 cv::Param::UNSIGNED_INT
#define CV_PROJ_SPHERICAL_EQRECT0 cv::PROJ_SPHERICAL_EQRECT
#define CV_PROJ_SPHERICAL_ORTHO0 cv::PROJ_SPHERICAL_ORTHO
#define CV_RANSAC0 cv::RANSAC
#define CV_RETR_CCOMP0 cv::RETR_CCOMP
#define CV_RETR_EXTERNAL0 cv::RETR_EXTERNAL
#define CV_RETR_FLOODFILL0 cv::RETR_FLOODFILL
#define CV_RETR_LIST0 cv::RETR_LIST
#define CV_RETR_TREE0 cv::RETR_TREE
#define CV_RIGID_BODY_MOTION0 cv::RIGID_BODY_MOTION
#define CV_RNG_NORMAL0 cv::RNG::NORMAL
#define CV_RNG_UNIFORM0 cv::RNG::UNIFORM
#define CV_ROTATION0 cv::ROTATION
#define CV_SELFSIMDESCRIPTOR_DEFAULT_LARGE_SIZE0 cv::SelfSimDescriptor::DEFAULT_LARGE_SIZE
#define CV_SELFSIMDESCRIPTOR_DEFAULT_NUM_ANGLES0 cv::SelfSimDescriptor::DEFAULT_NUM_ANGLES
#define CV_SELFSIMDESCRIPTOR_DEFAULT_NUM_DISTANCE_BUCKETS0 cv::SelfSimDescriptor::DEFAULT_NUM_DISTANCE_BUCKETS
#define CV_SELFSIMDESCRIPTOR_DEFAULT_SMALL_SIZE0 cv::SelfSimDescriptor::DEFAULT_SMALL_SIZE
#define CV_SELFSIMDESCRIPTOR_DEFAULT_START_DISTANCE_BUCKET0 cv::SelfSimDescriptor::DEFAULT_START_DISTANCE_BUCKET
#define CV_SORT_ASCENDING0 cv::SORT_ASCENDING
#define CV_SORT_DESCENDING0 cv::SORT_DESCENDING
#define CV_SORT_EVERY_COLUMN0 cv::SORT_EVERY_COLUMN
#define CV_SORT_EVERY_ROW0 cv::SORT_EVERY_ROW
#define CV_SPARSEMAT_HASH_BIT0 cv::SparseMat::HASH_BIT
#define CV_SPARSEMAT_HASH_SCALE0 cv::SparseMat::HASH_SCALE
#define CV_SPARSEMAT_MAGIC_VAL0 cv::SparseMat::MAGIC_VAL
#define CV_SPARSEMAT_MAX_DIM0 cv::SparseMat::MAX_DIM
#define CV_STEREOBM_BASIC_PRESET0 cv::StereoBM::BASIC_PRESET
#define CV_STEREOBM_FISH_EYE_PRESET0 cv::StereoBM::FISH_EYE_PRESET
#define CV_STEREOBM_NARROW_PRESET0 cv::StereoBM::NARROW_PRESET
#define CV_STEREOBM_PREFILTER_NORMALIZED_RESPONSE0 cv::StereoBM::PREFILTER_NORMALIZED_RESPONSE
#define CV_STEREOBM_PREFILTER_XSOBEL0 cv::StereoBM::PREFILTER_XSOBEL
#define CV_STEREOSGBM_DISP_SCALE0 cv::StereoSGBM::DISP_SCALE
#define CV_STEREOSGBM_DISP_SHIFT0 cv::StereoSGBM::DISP_SHIFT
#define CV_STEREOVAR_CYCLE_O0 cv::StereoVar::CYCLE_O
#define CV_STEREOVAR_CYCLE_V0 cv::StereoVar::CYCLE_V
#define CV_STEREOVAR_PENALIZATION_CHARBONNIER0 cv::StereoVar::PENALIZATION_CHARBONNIER
#define CV_STEREOVAR_PENALIZATION_PERONA_MALIK0 cv::StereoVar::PENALIZATION_PERONA_MALIK
#define CV_STEREOVAR_PENALIZATION_TICHONOV0 cv::StereoVar::PENALIZATION_TICHONOV
#define CV_STEREOVAR_USE_AUTO_PARAMS0 cv::StereoVar::USE_AUTO_PARAMS
#define CV_STEREOVAR_USE_EQUALIZE_HIST0 cv::StereoVar::USE_EQUALIZE_HIST
#define CV_STEREOVAR_USE_INITIAL_DISPARITY0 cv::StereoVar::USE_INITIAL_DISPARITY
#define CV_STEREOVAR_USE_MEDIAN_FILTERING0 cv::StereoVar::USE_MEDIAN_FILTERING
#define CV_STEREOVAR_USE_SMART_ID0 cv::StereoVar::USE_SMART_ID
#define CV_SUBDIV2D_NEXT_AROUND_DST0 cv::Subdiv2D::NEXT_AROUND_DST
#define CV_SUBDIV2D_NEXT_AROUND_LEFT0 cv::Subdiv2D::NEXT_AROUND_LEFT
#define CV_SUBDIV2D_NEXT_AROUND_ORG0 cv::Subdiv2D::NEXT_AROUND_ORG
#define CV_SUBDIV2D_NEXT_AROUND_RIGHT0 cv::Subdiv2D::NEXT_AROUND_RIGHT
#define CV_SUBDIV2D_PREV_AROUND_DST0 cv::Subdiv2D::PREV_AROUND_DST
#define CV_SUBDIV2D_PREV_AROUND_LEFT0 cv::Subdiv2D::PREV_AROUND_LEFT
#define CV_SUBDIV2D_PREV_AROUND_ORG0 cv::Subdiv2D::PREV_AROUND_ORG
#define CV_SUBDIV2D_PREV_AROUND_RIGHT0 cv::Subdiv2D::PREV_AROUND_RIGHT
#define CV_SUBDIV2D_PTLOC_ERROR0 cv::Subdiv2D::PTLOC_ERROR
#define CV_SUBDIV2D_PTLOC_INSIDE0 cv::Subdiv2D::PTLOC_INSIDE
#define CV_SUBDIV2D_PTLOC_ON_EDGE0 cv::Subdiv2D::PTLOC_ON_EDGE
#define CV_SUBDIV2D_PTLOC_OUTSIDE_RECT0 cv::Subdiv2D::PTLOC_OUTSIDE_RECT
#define CV_SUBDIV2D_PTLOC_VERTEX0 cv::Subdiv2D::PTLOC_VERTEX
#define CV_SVD_FULL_UV0 cv::SVD::FULL_UV
#define CV_SVD_MODIFY_A0 cv::SVD::MODIFY_A
#define CV_SVD_NO_UV0 cv::SVD::NO_UV
#define CV_SVM_C0 CvSVM::C
#define CV_SVM_COEF0 CvSVM::COEF
#define CV_SVM_C_SVC0 CvSVM::C_SVC
#define CV_SVM_DEGREE0 CvSVM::DEGREE
#define CV_SVM_EPS_SVR0 CvSVM::EPS_SVR
#define CV_SVM_GAMMA0 CvSVM::GAMMA
#define CV_SVM_LINEAR0 CvSVM::LINEAR
#define CV_SVM_NU0 CvSVM::NU
#define CV_SVM_NU_SVC0 CvSVM::NU_SVC
#define CV_SVM_NU_SVR0 CvSVM::NU_SVR
#define CV_SVM_ONE_CLASS0 CvSVM::ONE_CLASS
#define CV_SVM_P0 CvSVM::P
#define CV_SVM_POLY0 CvSVM::POLY
#define CV_SVM_RBF0 CvSVM::RBF
#define CV_SVM_SIGMOID0 CvSVM::SIGMOID
#define CV_TERMCRITERIA_COUNT0 cv::TermCriteria::COUNT
#define CV_TERMCRITERIA_EPS0 cv::TermCriteria::EPS
#define CV_TERMCRITERIA_MAX_ITER0 cv::TermCriteria::MAX_ITER
#define CV_THRESH_BINARY0 cv::THRESH_BINARY
#define CV_THRESH_BINARY_INV0 cv::THRESH_BINARY_INV
#define CV_THRESH_MASK0 cv::THRESH_MASK
#define CV_THRESH_OTSU0 cv::THRESH_OTSU
#define CV_THRESH_TOZERO0 cv::THRESH_TOZERO
#define CV_THRESH_TOZERO_INV0 cv::THRESH_TOZERO_INV
#define CV_THRESH_TRUNC0 cv::THRESH_TRUNC
#define CV_TM_CCOEFF0 cv::TM_CCOEFF
#define CV_TM_CCOEFF_NORMED0 cv::TM_CCOEFF_NORMED
#define CV_TM_CCORR0 cv::TM_CCORR
#define CV_TM_CCORR_NORMED0 cv::TM_CCORR_NORMED
#define CV_TM_SQDIFF0 cv::TM_SQDIFF
#define CV_TM_SQDIFF_NORMED0 cv::TM_SQDIFF_NORMED
#define CV_TRANSLATION0 cv::TRANSLATION
#define CV_TYPE_MASK0 cv::TYPE_MASK
#define CV_WARP_INVERSE_MAP0 cv::WARP_INVERSE_MAP
#define CV_WINDOW_AUTOSIZE0 cv::WINDOW_AUTOSIZE
#define CV_WINDOW_NORMAL0 cv::WINDOW_NORMAL
#define CV_WINDOW_OPENGL0 cv::WINDOW_OPENGL
#define CV_WND_PROP_ASPECT_RATIO0 cv::WND_PROP_ASPECT_RATIO
#define CV_WND_PROP_AUTOSIZE0 cv::WND_PROP_AUTOSIZE
#define CV_WND_PROP_FULLSCREEN0 cv::WND_PROP_FULLSCREEN
#define CV_WND_PROP_OPENGL0 cv::WND_PROP_OPENGL
#define CV__INPUTARRAY_EXPR0 cv::_InputArray::EXPR
#define CV__INPUTARRAY_FIXED_SIZE0 cv::_InputArray::FIXED_SIZE
#define CV__INPUTARRAY_FIXED_TYPE0 cv::_InputArray::FIXED_TYPE
#define CV__INPUTARRAY_GPU_MAT0 cv::_InputArray::GPU_MAT
#define CV__INPUTARRAY_KIND_MASK0 cv::_InputArray::KIND_MASK
#define CV__INPUTARRAY_KIND_SHIFT0 cv::_InputArray::KIND_SHIFT
#define CV__INPUTARRAY_MAT0 cv::_InputArray::MAT
#define CV__INPUTARRAY_MATX0 cv::_InputArray::MATX
#define CV__INPUTARRAY_NONE0 cv::_InputArray::NONE
#define CV__INPUTARRAY_OCL_MAT0 cv::_InputArray::OCL_MAT
#define CV__INPUTARRAY_OPENGL_BUFFER0 cv::_InputArray::OPENGL_BUFFER
#define CV__INPUTARRAY_OPENGL_TEXTURE0 cv::_InputArray::OPENGL_TEXTURE
#define CV__INPUTARRAY_STD_VECTOR0 cv::_InputArray::STD_VECTOR
#define CV__INPUTARRAY_STD_VECTOR_MAT0 cv::_InputArray::STD_VECTOR_MAT
#define CV__INPUTARRAY_STD_VECTOR_VECTOR0 cv::_InputArray::STD_VECTOR_VECTOR
BFMatcher* cv_create_BFMatcher(int normType, bool crossCheck);
BRISK* cv_create_BRISK(int thresh, int octaves, float patternScale);
BRISK* cv_create_BRISK5(vector_float* radiusList, vector_int* numberList, float dMax, float dMin, vector_int* indexChange);
BackgroundSubtractorMOG* cv_create_BackgroundSubtractorMOG();
BackgroundSubtractorMOG* cv_create_BackgroundSubtractorMOG4(int history, int nmixtures, double backgroundRatio, double noiseSigma);
RotatedRect* cv_CamShift(Mat* probImage, Rect* window, TermCriteria* criteria);
void cv_Canny(Mat* image, Mat* edges, double threshold1, double threshold2, int apertureSize, bool L2gradient);
CascadeClassifier* cv_create_CascadeClassifier();
CascadeClassifier* cv_create_CascadeClassifier1(string* filename);
CvANN_MLP* cv_create_CvANN_MLP();
CvANN_MLP* cv_create_CvANN_MLP4(Mat* layerSizes, int activateFunc, double fparam1, double fparam2);
CvBoost* cv_create_CvBoost();
CvBoost* cv_create_CvBoost8(Mat* trainData, int tflag, Mat* responses, Mat* varIdx, Mat* sampleIdx, Mat* varType, Mat* missingDataMask, CvBoostParams* params);
CvDTree* cv_create_CvDTree();
CvERTrees* cv_create_CvERTrees();
CvGBTrees* cv_create_CvGBTrees();
CvGBTrees* cv_create_CvGBTrees8(Mat* trainData, int tflag, Mat* responses, Mat* varIdx, Mat* sampleIdx, Mat* varType, Mat* missingDataMask, CvGBTreesParams* params);
CvKNearest* cv_create_CvKNearest();
CvKNearest* cv_create_CvKNearest5(Mat* trainData, Mat* responses, Mat* sampleIdx, bool isRegression, int max_k);
CvNormalBayesClassifier* cv_create_CvNormalBayesClassifier();
CvNormalBayesClassifier* cv_create_CvNormalBayesClassifier4(Mat* trainData, Mat* responses, Mat* varIdx, Mat* sampleIdx);
CvRTrees* cv_create_CvRTrees();
CvSVM* cv_create_CvSVM();
CvSVM* cv_create_CvSVM5(Mat* trainData, Mat* responses, Mat* varIdx, Mat* sampleIdx, CvSVMParams* params);
DMatch* cv_create_DMatch();
DMatch* cv_create_DMatch3(int _queryIdx, int _trainIdx, float _distance);
DMatch* cv_create_DMatch4(int _queryIdx, int _trainIdx, int _imgIdx, float _distance);
EM* cv_create_EM(int nclusters, int covMatType, TermCriteria* termCrit);
FastFeatureDetector* cv_create_FastFeatureDetector(int threshold, bool nonmaxSuppression);
FileNode* cv_create_FileNode();
FileStorage* cv_create_FileStorage();
FileStorage* cv_create_FileStorage3(string* source, int flags, string* encoding);
FlannBasedMatcher* cv_create_FlannBasedMatcher(flann_IndexParams* indexParams, flann_SearchParams* searchParams);
GFTTDetector* cv_create_GFTTDetector(int maxCorners, double qualityLevel, double minDistance, int blockSize, bool useHarrisDetector, double k);
void cv_GaussianBlur(Mat* src, Mat* dst, Size* ksize, double sigmaX, double sigmaY, int borderType);
GridAdaptedFeatureDetector* cv_create_GridAdaptedFeatureDetector(FeatureDetector* detector, int maxTotalKeypoints, int gridRows, int gridCols);
HOGDescriptor* cv_create_HOGDescriptor();
HOGDescriptor* cv_create_HOGDescriptor1(String* filename);
HOGDescriptor* cv_create_HOGDescriptor11(Size* _winSize, Size* _blockSize, Size* _blockStride, Size* _cellSize, int _nbins, int _derivAperture, double _winSigma, int _histogramNormType, double _L2HysThreshold, bool _gammaCorrection, int _nlevels);
void cv_HoughCircles(Mat* image, Mat* circles, int method, double dp, double minDist, double param1, double param2, int minRadius, int maxRadius);
void cv_HoughLines(Mat* image, Mat* lines, double rho, double theta, int threshold, double srn, double stn);
void cv_HoughLinesP(Mat* image, Mat* lines, double rho, double theta, int threshold, double minLineLength, double maxLineGap);
void cv_HuMoments(Moments* m, Mat* hu);
Index* cv_create_Index();
Index* cv_create_Index3(Mat* features, IndexParams* params, cvflann_flann_distance_t* distType);
KDTree* cv_create_KDTree();
KDTree* cv_create_KDTree2(Mat* points, bool copyAndReorderPoints);
KDTree* cv_create_KDTree3(Mat* points, Mat* _labels, bool copyAndReorderPoints);
KalmanFilter* cv_create_KalmanFilter();
KalmanFilter* cv_create_KalmanFilter4(int dynamParams, int measureParams, int controlParams, int type);
KeyPoint* cv_create_KeyPoint();
KeyPoint* cv_create_KeyPoint7(float x, float y, float _size, float _angle, float _response, int _octave, int _class_id);
void cv_LUT(Mat* src, Mat* lut, Mat* dst, int interpolation);
void cv_Laplacian(Mat* src, Mat* dst, int ddepth, int ksize, double scale, double delta, int borderType);
MSER* cv_create_MSER(int _delta, int _min_area, int _max_area, double _max_variation, double _min_diversity, int _max_evolution, double _area_threshold, double _min_margin, int _edge_blur_size);
double cv_Mahalanobis(Mat* v1, Mat* v2, Mat* icovar);
ORB* cv_create_ORB(int nfeatures, float scaleFactor, int nlevels, int edgeThreshold, int firstLevel, int WTA_K, int scoreType, int patchSize);
void cv_PCABackProject(Mat* data, Mat* mean, Mat* eigenvectors, Mat* result);
void cv_PCACompute(Mat* data, Mat* mean, Mat* eigenvectors, int maxComponents);
void cv_PCAComputeVar(Mat* data, Mat* mean, Mat* eigenvectors, double retainedVariance);
void cv_PCAProject(Mat* data, Mat* mean, Mat* eigenvectors, Mat* result);
double cv_PSNR(Mat* src1, Mat* src2);
Params* cv_create_Params();
PyramidAdaptedFeatureDetector* cv_create_PyramidAdaptedFeatureDetector(FeatureDetector* detector, int maxLevel);
Vec3d* cv_RQDecomp3x3(Mat* src, Mat* mtxR, Mat* mtxQ, Mat* Qx, Mat* Qy, Mat* Qz);
void cv_Rodrigues(Mat* src, Mat* dst, Mat* jacobian);
void cv_SVBackSubst(Mat* w, Mat* u, Mat* vt, Mat* rhs, Mat* dst);
void cv_SVDecomp(Mat* src, Mat* w, Mat* u, Mat* vt, int flags);
void cv_Scharr(Mat* src, Mat* dst, int ddepth, int dx, int dy, double scale, double delta, int borderType);
SimpleBlobDetector* cv_create_SimpleBlobDetector(SimpleBlobDetector_Params* parameters);
void cv_Sobel(Mat* src, Mat* dst, int ddepth, int dx, int dy, int ksize, double scale, double delta, int borderType);
StarDetector* cv_create_StarDetector(int _maxSize, int _responseThreshold, int _lineThresholdProjected, int _lineThresholdBinarized, int _suppressNonmaxSize);
StereoBM* cv_create_StereoBM();
StereoBM* cv_create_StereoBM3(int preset, int ndisparities, int SADWindowSize);
StereoSGBM* cv_create_StereoSGBM();
StereoSGBM* cv_create_StereoSGBM11(int minDisparity, int numDisparities, int SADWindowSize, int P1, int P2, int disp12MaxDiff, int preFilterCap, int uniquenessRatio, int speckleWindowSize, int speckleRange, bool fullDP);
StereoVar* cv_create_StereoVar();
StereoVar* cv_create_StereoVar12(int levels, double pyrScale, int nIt, int minDisp, int maxDisp, int poly_n, double poly_sigma, float fi, float lambda, int penalization, int cycle, int flags);
Subdiv2D* cv_create_Subdiv2D();
Subdiv2D* cv_create_Subdiv2D1(Rect* rect);
VideoCapture* cv_create_VideoCapture();
VideoCapture* cv_create_VideoCapture1(int device);
VideoWriter* cv_create_VideoWriter();
VideoWriter* cv_create_VideoWriter5(string* filename, int fourcc, double fps, Size* frameSize, bool isColor);
Algorithm* cv_Algorithm__create(Algorithm* self, string* name);
void cv_absdiff(Mat* src1, Mat* src2, Mat* dst);
void cv_accumulate(Mat* src, Mat* dst, Mat* mask);
void cv_accumulateProduct(Mat* src1, Mat* src2, Mat* dst, Mat* mask);
void cv_accumulateSquare(Mat* src, Mat* dst, Mat* mask);
void cv_accumulateWeighted(Mat* src, Mat* dst, double alpha, Mat* mask);
void cv_adaptiveBilateralFilter(Mat* src, Mat* dst, Size* ksize, double sigmaSpace, Point* anchor, int borderType);
void cv_adaptiveThreshold(Mat* src, Mat* dst, double maxValue, int adaptiveMethod, int thresholdType, int blockSize, double C);
void cv_add(Mat* src1, Mat* src2, Mat* dst, Mat* mask, int dtype);
void cv_DescriptorMatcher_add1(DescriptorMatcher* self, vector_Mat* descriptors);
void cv_addWeighted(Mat* src1, double alpha, Mat* src2, double beta, double gamma, Mat* dst, int dtype);
void cv_CLAHE_apply(CLAHE* self, Mat* src, Mat* dst);
void cv_applyColorMap(Mat* src, Mat* dst, int colormap);
void cv_approxPolyDP(Mat* curve, Mat* approxCurve, double epsilon, bool closed);
double cv_arcLength(Mat* curve, bool closed);
void cv_batchDistance(Mat* src1, Mat* src2, Mat* dist, int dtype, Mat* nidx, int normType, int K, Mat* mask, int update, bool crosscheck);
void cv_bilateralFilter(Mat* src, Mat* dst, int d, double sigmaColor, double sigmaSpace, int borderType);
void cv_bitwise_and(Mat* src1, Mat* src2, Mat* dst, Mat* mask);
void cv_bitwise_not(Mat* src, Mat* dst, Mat* mask);
void cv_bitwise_or(Mat* src1, Mat* src2, Mat* dst, Mat* mask);
void cv_bitwise_xor(Mat* src1, Mat* src2, Mat* dst, Mat* mask);
void cv_blur(Mat* src, Mat* dst, Size* ksize, Point* anchor, int borderType);
int cv_borderInterpolate(int p, int len, int borderType);
Rect* cv_boundingRect(Mat* points);
void cv_boxFilter(Mat* src, Mat* dst, int ddepth, Size* ksize, Point* anchor, bool normalize, int borderType);
void cv_KDTree_build(KDTree* self, Mat* points, bool copyAndReorderPoints);
void cv_Index_build3(Index* self, Mat* features, IndexParams* params, cvflann_flann_distance_t* distType);
int cv_buildOpticalFlowPyramid(Mat* img, vector_Mat* pyramid, Size* winSize, int maxLevel, bool withDerivatives, int pyrBorder, int derivBorder, bool tryReuseInputImage);
void cv_calcBackProject(vector_Mat* images, vector_int* channels, Mat* hist, Mat* dst, vector_float* ranges, double scale);
void cv_calcCovarMatrix(Mat* samples, Mat* covar, Mat* mean, int flags, int ctype);
double cv_calcGlobalOrientation(Mat* orientation, Mat* mask, Mat* mhi, double timestamp, double duration);
void cv_calcHist(vector_Mat* images, vector_int* channels, Mat* mask, Mat* hist, vector_int* histSize, vector_float* ranges, bool accumulate);
void cv_calcMotionGradient(Mat* mhi, Mat* mask, Mat* orientation, double delta1, double delta2, int apertureSize);
void cv_calcOpticalFlowFarneback(Mat* prev, Mat* next, Mat* flow, double pyr_scale, int levels, int winsize, int iterations, int poly_n, double poly_sigma, int flags);
void cv_calcOpticalFlowPyrLK(Mat* prevImg, Mat* nextImg, Mat* prevPts, Mat* nextPts, Mat* status, Mat* err, Size* winSize, int maxLevel, TermCriteria* criteria, int flags, double minEigThreshold);
void cv_calcOpticalFlowSF(Mat* from, Mat* to, Mat* flow, int layers, int averaging_block_size, int max_flow);
void cv_calcOpticalFlowSF16(Mat* from, Mat* to, Mat* flow, int layers, int averaging_block_size, int max_flow, double sigma_dist, double sigma_color, int postprocess_window, double sigma_dist_fix, double sigma_color_fix, double occ_thr, int upscale_averaging_radius, double upscale_sigma_dist, double upscale_sigma_color, double speed_up_thr);
double cv_calibrateCamera(vector_Mat* objectPoints, vector_Mat* imagePoints, Size* imageSize, Mat* cameraMatrix, Mat* distCoeffs, vector_Mat* rvecs, vector_Mat* tvecs, int flags, TermCriteria* criteria);
void cv_calibrationMatrixValues(Mat* cameraMatrix, Size* imageSize, double apertureWidth, double apertureHeight, double fovx, double fovy, double focalLength, Point2d* principalPoint, double aspectRatio);
void cv_cartToPolar(Mat* x, Mat* y, Mat* magnitude, Mat* angle, bool angleInDegrees);
int cv_chamerMatching(Mat* img, Mat* templ, vector_vector_Point* results, vector_float* cost, double templScale, int maxMatches, double minMatchDistance, int padX, int padY, int scales, double minScale, double maxScale, double orientationWeight, double truncate);
bool cv_HOGDescriptor_checkDetectorSize(HOGDescriptor* self);
bool cv_checkHardwareSupport(int feature);
bool cv_checkRange(Mat* a, bool quiet, Point* pos, double minVal, double maxVal);
void cv_circle(Mat* img, Point* center, int radius, Scalar* color, int thickness, int lineType, int shift);
void cv_CvNormalBayesClassifier_clear(CvNormalBayesClassifier* self);
void cv_DescriptorMatcher_clear0(DescriptorMatcher* self);
bool cv_clipLine(Rect* imgRect, Point* pt1, Point* pt2);
void cv_compare(Mat* src1, Mat* src2, Mat* dst, int cmpop);
double cv_compareHist(Mat* H1, Mat* H2, int method);
void cv_completeSymm(Mat* mtx, bool lowerToUpper);
void cv_composeRT(Mat* rvec1, Mat* tvec1, Mat* rvec2, Mat* tvec2, Mat* rvec3, Mat* tvec3, Mat* dr3dr1, Mat* dr3dt1, Mat* dr3dr2, Mat* dr3dt2, Mat* dt3dr1, Mat* dt3dt1, Mat* dt3dr2, Mat* dt3dt2);
void cv_DescriptorExtractor_compute(DescriptorExtractor* self, Mat* image, vector_KeyPoint* keypoints, Mat* descriptors);
void cv_Feature2D_compute3(Feature2D* self, Mat* image, vector_KeyPoint* keypoints, Mat* descriptors);
void cv_HOGDescriptor_compute5(HOGDescriptor* self, Mat* img, vector_float* descriptors, Size* winStride, Size* padding, vector_Point* locations);
void cv_computeCorrespondEpilines(Mat* points, int whichImage, Mat* F, Mat* lines);
void cv_HOGDescriptor_computeGradient(HOGDescriptor* self, Mat* img, Mat* grad, Mat* angleOfs, Size* paddingTL, Size* paddingBR);
double cv_contourArea(Mat* contour, bool oriented);
void cv_convertMaps(Mat* map1, Mat* map2, Mat* dstmap1, Mat* dstmap2, int dstmap1type, bool nninterpolation);
void cv_convertPointsFromHomogeneous(Mat* src, Mat* dst);
void cv_convertPointsToHomogeneous(Mat* src, Mat* dst);
void cv_convertScaleAbs(Mat* src, Mat* dst, double alpha, double beta);
void cv_convexHull(Mat* points, Mat* hull, bool clockwise, bool returnPoints);
void cv_convexityDefects(Mat* contour, Mat* convexhull, Mat* convexityDefects);
void cv_copyMakeBorder(Mat* src, Mat* dst, int top, int bottom, int left, int right, int borderType, Scalar* value);
void cv_cornerEigenValsAndVecs(Mat* src, Mat* dst, int blockSize, int ksize, int borderType);
void cv_cornerHarris(Mat* src, Mat* dst, int blockSize, int ksize, double k, int borderType);
void cv_cornerMinEigenVal(Mat* src, Mat* dst, int blockSize, int ksize, int borderType);
void cv_cornerSubPix(Mat* image, Mat* corners, Size* winSize, Size* zeroZone, TermCriteria* criteria);
Mat* cv_KalmanFilter_correct(KalmanFilter* self, Mat* measurement);
void cv_correctMatches(Mat* F, Mat* points1, Mat* points2, Mat* newPoints1, Mat* newPoints2);
int cv_countNonZero(Mat* src);
void cv_CvANN_MLP_create(CvANN_MLP* self, Mat* layerSizes, int activateFunc, double fparam1, double fparam2);
DescriptorMatcher* cv_DescriptorMatcher_create1(DescriptorMatcher* self, string* descriptorMatcherType);
CLAHE* cv_createCLAHE(double clipLimit, Size* tileGridSize);
FaceRecognizer* cv_createEigenFaceRecognizer(int num_components, double threshold);
FaceRecognizer* cv_createFisherFaceRecognizer(int num_components, double threshold);
void cv_createHanningWindow(Mat* dst, Size* winSize, int type);
FaceRecognizer* cv_createLBPHFaceRecognizer(int radius, int neighbors, int grid_x, int grid_y, double threshold);
float cv_cubeRoot(float val);
void cv_cvtColor(Mat* src, Mat* dst, int code, int dstCn);
void cv_dct(Mat* src, Mat* dst, int flags);
void cv_decomposeProjectionMatrix(Mat* projMatrix, Mat* cameraMatrix, Mat* rotMatrix, Mat* transVect, Mat* rotMatrixX, Mat* rotMatrixY, Mat* rotMatrixZ, Mat* eulerAngles);
void cv_destroyAllWindows();
void cv_destroyWindow(string* winname);
void cv_FeatureDetector_detect(FeatureDetector* self, Mat* image, vector_KeyPoint* keypoints, Mat* mask);
void cv_HOGDescriptor_detect7(HOGDescriptor* self, Mat* img, vector_Point* foundLocations, vector_double* weights, double hitThreshold, Size* winStride, Size* padding, vector_Point* searchLocations);
void cv_CascadeClassifier_detectMultiScale(CascadeClassifier* self, Mat* image, vector_Rect* objects, double scaleFactor, int minNeighbors, int flags, Size* minSize, Size* maxSize);
void cv_CascadeClassifier_detectMultiScale10(CascadeClassifier* self, Mat* image, vector_Rect* objects, vector_int* rejectLevels, vector_double* levelWeights, double scaleFactor, int minNeighbors, int flags, Size* minSize, Size* maxSize, bool outputRejectLevels);
void cv_HOGDescriptor_detectMultiScale9(HOGDescriptor* self, Mat* img, vector_Rect* foundLocations, vector_double* foundWeights, double hitThreshold, Size* winStride, Size* padding, double scale, double finalThreshold, bool useMeanshiftGrouping);
double cv_determinant(Mat* mtx);
void cv_dft(Mat* src, Mat* dst, int flags, int nonzeroRows);
void cv_dilate(Mat* src, Mat* dst, Mat* kernel, Point* anchor, int iterations, int borderType, Scalar* borderValue);
int cv_KDTree_dims(KDTree* self);
void cv_distanceTransform(Mat* src, Mat* dst, Mat* labels, int distanceType, int maskSize, int labelType);
void cv_distanceTransform4(Mat* src, Mat* dst, int distanceType, int maskSize);
void cv_divide(Mat* src1, Mat* src2, Mat* dst, double scale, int dtype);
void cv_divide4(double scale, Mat* src2, Mat* dst, int dtype);
void cv_drawChessboardCorners(Mat* image, Size* patternSize, Mat* corners, bool patternWasFound);
void cv_drawContours(Mat* image, vector_Mat* contours, int contourIdx, Scalar* color, int thickness, int lineType, Mat* hierarchy, int maxLevel, Point* offset);
void cv_drawDataMatrixCodes(Mat* image, vector_string* codes, Mat* corners);
void cv_drawKeypoints(Mat* image, vector_KeyPoint* keypoints, Mat* outImage, Scalar* color, int flags);
int cv_Subdiv2D_edgeDst(Subdiv2D* self, int edge, Point2f* dstpt);
int cv_Subdiv2D_edgeOrg(Subdiv2D* self, int edge, Point2f* orgpt);
bool cv_eigen(Mat* src, bool computeEigenvectors, Mat* eigenvalues, Mat* eigenvectors);
void cv_ellipse(Mat* img, Point* center, Size* axes, double angle, double startAngle, double endAngle, Scalar* color, int thickness, int lineType, int shift);
void cv_ellipse2Poly(Point* center, Size* axes, int angle, int arcStart, int arcEnd, int delta, vector_Point* pts);
void cv_ellipse5(Mat* img, RotatedRect* box, Scalar* color, int thickness, int lineType);
bool cv_FileNode_empty(FileNode* self);
bool cv_CascadeClassifier_empty0(CascadeClassifier* self);
void cv_equalizeHist(Mat* src, Mat* dst);
void cv_erode(Mat* src, Mat* dst, Mat* kernel, Point* anchor, int iterations, int borderType, Scalar* borderValue);
int cv_estimateAffine3D(Mat* src, Mat* dst, Mat* out, Mat* inliers, double ransacThreshold, double confidence);
Mat* cv_estimateRigidTransform(Mat* src, Mat* dst, bool fullAffine);
void cv_exp(Mat* src, Mat* dst);
void cv_extractChannel(Mat* src, Mat* dst, int coi);
float cv_fastAtan2(float y, float x);
void cv_fillConvexPoly(Mat* img, Mat* points, Scalar* color, int lineType, int shift);
void cv_fillPoly(Mat* img, vector_Mat* pts, Scalar* color, int lineType, int shift, Point* offset);
void cv_filter2D(Mat* src, Mat* dst, int ddepth, Mat* kernel, Point* anchor, double delta, int borderType);
void cv_filterSpeckles(Mat* img, double newVal, int maxSpeckleSize, double maxDiff, Mat* buf);
bool cv_findChessboardCorners(Mat* image, Size* patternSize, Mat* corners, int flags);
bool cv_findCirclesGrid(Mat* image, Size* patternSize, Mat* centers, int flags, FeatureDetector* blobDetector);
bool cv_findCirclesGridDefault(Mat* image, Size* patternSize, Mat* centers, int flags);
void cv_findContours(Mat* image, vector_Mat* contours, Mat* hierarchy, int mode, int method, Point* offset);
void cv_findDataMatrix(Mat* image, vector_string* codes, Mat* corners, vector_Mat* dmtx);
Mat* cv_findFundamentalMat(Mat* points1, Mat* points2, int method, double param1, double param2, Mat* mask);
Mat* cv_findHomography(Mat* srcPoints, Mat* dstPoints, int method, double ransacReprojThreshold, Mat* mask);
int cv_KDTree_findNearest(KDTree* self, Mat* vec, int K, int Emax, Mat* neighborsIdx, Mat* neighbors, Mat* dist, Mat* labels);
int cv_Subdiv2D_findNearest2(Subdiv2D* self, Point2f* pt, Point2f* nearestPt);
void cv_findNonZero(Mat* src, Mat* idx);
void cv_KDTree_findOrthoRange(KDTree* self, Mat* minBounds, Mat* maxBounds, Mat* neighborsIdx, Mat* neighbors, Mat* labels);
float cv_CvKNearest_find_nearest(CvKNearest* self, Mat* samples, int k, Mat* results, Mat* neighborResponses, Mat* dists);
RotatedRect* cv_fitEllipse(Mat* points);
void cv_fitLine(Mat* points, Mat* line, int distType, double param, double reps, double aeps);
void cv_flip(Mat* src, Mat* dst, int flipCode);
int cv_floodFill(Mat* image, Mat* mask, Point* seedPoint, Scalar* newVal, Rect* rect, Scalar* loDiff, Scalar* upDiff, int flags);
void cv_gemm(Mat* src1, Mat* src2, double alpha, Mat* src3, double gamma, Mat* dst, int flags);
void cv_BRISK_generateKernel(BRISK* self, vector_float* radiusList, vector_int* numberList, float dMax, float dMin, vector_int* indexChange);
double cv_VideoCapture_get(VideoCapture* self, int propId);
Mat* cv_getAffineTransform(Mat* src, Mat* dst);
Algorithm* cv_Algorithm_getAlgorithm(Algorithm* self, string* name);
cvflann_flann_algorithm_t* cv_Index_getAlgorithm0(Index* self);
bool cv_Algorithm_getBool(Algorithm* self, string* name);
string* cv_getBuildInformation();
int64 cv_getCPUTickCount();
vector_float* cv_HOGDescriptor_getDaimlerPeopleDetector(HOGDescriptor* self);
Mat* cv_getDefaultNewCameraMatrix(Mat* cameraMatrix, Size* imgsize, bool centerPrincipalPoint);
vector_float* cv_HOGDescriptor_getDefaultPeopleDetector(HOGDescriptor* self);
void cv_getDerivKernels(Mat* kx, Mat* ky, int dx, int dy, int ksize, bool normalize, int ktype);
size_t cv_HOGDescriptor_getDescriptorSize(HOGDescriptor* self);
cvflann_flann_distance_t* cv_Index_getDistance(Index* self);
double cv_Algorithm_getDouble(Algorithm* self, string* name);
int cv_Subdiv2D_getEdge(Subdiv2D* self, int edge, int nextEdgeType);
void cv_Subdiv2D_getEdgeList(Subdiv2D* self, vector_Vec4f* edgeList);
FileNode* cv_FileStorage_getFirstTopLevelNode(FileStorage* self);
Mat* cv_getGaborKernel(Size* ksize, double sigma, double theta, double lambd, double gamma, double psi, int ktype);
Mat* cv_getGaussianKernel(int ksize, double sigma, int ktype);
int cv_Algorithm_getInt(Algorithm* self, string* name);
void cv_Algorithm_getList(Algorithm* self, vector_string* algorithms);
Mat* cv_Algorithm_getMat(Algorithm* self, string* name);
vector_Mat* cv_Algorithm_getMatVector(Algorithm* self, string* name);
int cv_getNumberOfCPUs();
int cv_getOptimalDFTSize(int vecsize);
Mat* cv_getOptimalNewCameraMatrix(Mat* cameraMatrix, Mat* distCoeffs, Size* imageSize, double alpha, Size* newImgSize, Rect* validPixROI, bool centerPrincipalPoint);
void cv_Algorithm_getParams(Algorithm* self, vector_string* names);
Mat* cv_getPerspectiveTransform(Mat* src, Mat* dst);
void cv_KDTree_getPoints(KDTree* self, Mat* idx, Mat* pts, Mat* labels);
void cv_getRectSubPix(Mat* image, Size* patchSize, Point2f* center, Mat* patch, int patchType);
Mat* cv_getRotationMatrix2D(Point2f* center, double angle, double scale);
string* cv_Algorithm_getString(Algorithm* self, string* name);
Mat* cv_getStructuringElement(int shape, Size* ksize, Point* anchor);
Size* cv_getTextSize(string* text, int fontFace, double fontScale, int thickness, int* baseLine);
int64 cv_getTickCount();
double cv_getTickFrequency();
int cv_getTrackbarPos(string* trackbarname, string* winname);
vector_Mat* cv_DescriptorMatcher_getTrainDescriptors(DescriptorMatcher* self);
void cv_Subdiv2D_getTriangleList(Subdiv2D* self, vector_Vec6f* triangleList);
Rect* cv_getValidDisparityROI(Rect* roi1, Rect* roi2, int minDisparity, int numberOfDisparities, int SADWindowSize);
Mat* cv_CvDTree_getVarImportance(CvDTree* self);
Mat* cv_CvRTrees_getVarImportance0(CvRTrees* self);
Point2f* cv_Subdiv2D_getVertex(Subdiv2D* self, int vertex, int* firstEdge);
void cv_Subdiv2D_getVoronoiFacetList(Subdiv2D* self, vector_int* idx, vector_vector_Point2f* facetList, vector_Point2f* facetCenters);
double cv_HOGDescriptor_getWinSigma(HOGDescriptor* self);
double cv_getWindowProperty(string* winname, int prop_id);
int cv_CvSVM_get_support_vector_count(CvSVM* self);
int cv_CvSVM_get_var_count(CvSVM* self);
void cv_goodFeaturesToTrack(Mat* image, Mat* corners, int maxCorners, double qualityLevel, double minDistance, Mat* mask, int blockSize, bool useHarrisDetector, double k);
bool cv_VideoCapture_grab(VideoCapture* self);
void cv_grabCut(Mat* img, Mat* mask, Rect* rect, Mat* bgdModel, Mat* fgdModel, int iterCount, int mode);
void cv_groupRectangles(vector_Rect* rectList, vector_int* weights, int groupThreshold, double eps);
void cv_hconcat(vector_Mat* src, Mat* dst);
void cv_idct(Mat* src, Mat* dst, int flags);
void cv_idft(Mat* src, Mat* dst, int flags, int nonzeroRows);
Mat* cv_imdecode(Mat* buf, int flags);
bool cv_imencode(string* ext, Mat* img, vector_uchar* buf, vector_int* params);
Mat* cv_imread(string* filename, int flags);
void cv_imshow(string* winname, Mat* mat);
bool cv_imwrite(string* filename, Mat* img, vector_int* params);
void cv_inRange(Mat* src, Mat* lowerb, Mat* upperb, Mat* dst);
Mat* cv_initCameraMatrix2D(vector_Mat* objectPoints, vector_Mat* imagePoints, Size* imageSize, double aspectRatio);
void cv_Subdiv2D_initDelaunay(Subdiv2D* self, Rect* rect);
void cv_initUndistortRectifyMap(Mat* cameraMatrix, Mat* distCoeffs, Mat* R, Mat* newCameraMatrix, Size* size, int m1type, Mat* map1, Mat* map2);
float cv_initWideAngleProjMap(Mat* cameraMatrix, Mat* distCoeffs, Size* imageSize, int destImageWidth, int m1type, Mat* map1, Mat* map2, int projType, double alpha);
int cv_Subdiv2D_insert(Subdiv2D* self, Point2f* pt);
void cv_Subdiv2D_insert1(Subdiv2D* self, vector_Point2f* ptvec);
void cv_insertChannel(Mat* src, Mat* dst, int coi);
void cv_integral(Mat* src, Mat* sum, int sdepth);
void cv_integral4(Mat* src, Mat* sum, Mat* sqsum, int sdepth);
void cv_integral5(Mat* src, Mat* sum, Mat* sqsum, Mat* tilted, int sdepth);
float cv_intersectConvexConvex(Mat* _p1, Mat* _p2, Mat* _p12, bool handleNested);
double cv_invert(Mat* src, Mat* dst, int flags);
void cv_invertAffineTransform(Mat* M, Mat* iM);
bool cv_isContourConvex(Mat* contour);
bool cv_FileNode_isInt(FileNode* self);
bool cv_FileNode_isMap(FileNode* self);
bool cv_FileNode_isNamed(FileNode* self);
bool cv_FileNode_isNone(FileNode* self);
bool cv_FileStorage_isOpened(FileStorage* self);
bool cv_VideoWriter_isOpened0(VideoWriter* self);
bool cv_FileNode_isReal(FileNode* self);
bool cv_FileNode_isSeq(FileNode* self);
bool cv_FileNode_isString(FileNode* self);
bool cv_EM_isTrained(EM* self);
double cv_kmeans(Mat* data, int K, Mat* bestLabels, TermCriteria* criteria, int attempts, int flags, Mat* centers);
void cv_DescriptorMatcher_knnMatch(DescriptorMatcher* self, Mat* queryDescriptors, Mat* trainDescriptors, vector_vector_DMatch* matches, int k, Mat* mask, bool compactResult);
void cv_DescriptorMatcher_knnMatch5(DescriptorMatcher* self, Mat* queryDescriptors, vector_vector_DMatch* matches, int k, vector_Mat* masks, bool compactResult);
void cv_Index_knnSearch(Index* self, Mat* query, Mat* indices, Mat* dists, int knn, SearchParams* params);
void cv_line(Mat* img, Point* pt1, Point* pt2, Scalar* color, int thickness, int lineType, int shift);
bool cv_Index_load(Index* self, Mat* features, string* filename);
void cv_FaceRecognizer_load1(FaceRecognizer* self, string* filename);
bool cv_HOGDescriptor_load2(HOGDescriptor* self, String* filename, String* objname);
int cv_Subdiv2D_locate(Subdiv2D* self, Point2f* pt, int edge, int vertex);
void cv_log(Mat* src, Mat* dst);
void cv_magnitude(Mat* x, Mat* y, Mat* magnitude);
void cv_matMulDeriv(Mat* A, Mat* B, Mat* dABdA, Mat* dABdB);
void cv_DescriptorMatcher_match(DescriptorMatcher* self, Mat* queryDescriptors, Mat* trainDescriptors, vector_DMatch* matches, Mat* mask);
void cv_DescriptorMatcher_match3(DescriptorMatcher* self, Mat* queryDescriptors, vector_DMatch* matches, vector_Mat* masks);
double cv_matchShapes(Mat* contour1, Mat* contour2, int method, double parameter);
void cv_matchTemplate(Mat* image, Mat* templ, Mat* result, int method);
void cv_max(Mat* src1, Mat* src2, Mat* dst);
Scalar* cv_mean(Mat* src, Mat* mask);
int cv_meanShift(Mat* probImage, Rect* window, TermCriteria* criteria);
void cv_meanStdDev(Mat* src, Mat* mean, Mat* stddev, Mat* mask);
void cv_medianBlur(Mat* src, Mat* dst, int ksize);
void cv_merge(vector_Mat* mv, Mat* dst);
void cv_min(Mat* src1, Mat* src2, Mat* dst);
RotatedRect* cv_minAreaRect(Mat* points);
void cv_minEnclosingCircle(Mat* points, Point2f* center, float radius);
void cv_minMaxLoc(Mat* src, double* minVal, double* maxVal, Point* minLoc, Point* maxLoc, Mat* mask);
void cv_mixChannels(vector_Mat* src, vector_Mat* dst, vector_int* fromTo);
Moments* cv_moments(Mat* array, bool binaryImage);
void cv_morphologyEx(Mat* src, Mat* dst, int op, Mat* kernel, Point* anchor, int iterations, int borderType, Scalar* borderValue);
void cv_moveWindow(string* winname, int x, int y);
void cv_mulSpectrums(Mat* a, Mat* b, Mat* c, int flags, bool conjB);
void cv_mulTransposed(Mat* src, Mat* dst, bool aTa, Mat* delta, double scale, int dtype);
void cv_multiply(Mat* src1, Mat* src2, Mat* dst, double scale, int dtype);
string* cv_FileNode_name(FileNode* self);
void cv_namedWindow(string* winname, int flags);
int cv_Subdiv2D_nextEdge(Subdiv2D* self, int edge);
double cv_norm(Mat* src1, int normType, Mat* mask);
double cv_norm4(Mat* src1, Mat* src2, int normType, Mat* mask);
void cv_normalize(Mat* src, Mat* dst, double alpha, double beta, int norm_type, int dtype, Mat* mask);
bool cv_FileStorage_open(FileStorage* self, string* filename, int flags, string* encoding);
bool cv_VideoCapture_open1(VideoCapture* self, int device);
bool cv_VideoWriter_open5(VideoWriter* self, string* filename, int fourcc, double fps, Size* frameSize, bool isColor);
void cv_StereoBM_call(StereoBM* self, Mat* left, Mat* right, Mat* disparity, int disptype);
void cv_StarDetector_call(StarDetector* self, Mat* image, vector_KeyPoint* keypoints);
void cv_StereoVar_call(StereoVar* self, Mat* left, Mat* right, Mat* disp);
void cv_Feature2D_call(Feature2D* self, Mat* image, Mat* mask, vector_KeyPoint* keypoints, Mat* descriptors, bool useProvidedKeypoints);
FileNode* cv_FileStorage_getelem(FileStorage* self, c_string nodename);
FileNode* cv_FileNode_getelem(FileNode* self, int i);
string* cv_Algorithm_paramHelp(Algorithm* self, string* name);
int cv_Algorithm_paramType(Algorithm* self, string* name);
void cv_patchNaNs(Mat* a, double val);
void cv_perspectiveTransform(Mat* src, Mat* dst, Mat* m);
void cv_phase(Mat* x, Mat* y, Mat* angle, bool angleInDegrees);
Point2d* cv_phaseCorrelate(Mat* src1, Mat* src2, Mat* window);
Point2d* cv_phaseCorrelateRes(Mat* src1, Mat* src2, Mat* window, double* response);
double cv_pointPolygonTest(Mat* contour, Point2f* pt, bool measureDist);
void cv_polarToCart(Mat* magnitude, Mat* angle, Mat* x, Mat* y, bool angleInDegrees);
void cv_polylines(Mat* img, vector_Mat* pts, bool isClosed, Scalar* color, int thickness, int lineType, int shift);
void cv_pow(Mat* src, double power, Mat* dst);
void cv_preCornerDetect(Mat* src, Mat* dst, int ksize, int borderType);
float cv_CvNormalBayesClassifier_predict(CvNormalBayesClassifier* self, Mat* samples, Mat* results);
Mat* cv_KalmanFilter_predict1(KalmanFilter* self, Mat* control);
float cv_CvANN_MLP_predict2(CvANN_MLP* self, Mat* inputs, Mat* outputs);
void cv_FaceRecognizer_predict3(FaceRecognizer* self, Mat* src, int label, double confidence);
float cv_CvGBTrees_predict4(CvGBTrees* self, Mat* sample, Mat* missing, Range* slice, int k);
float cv_CvBoost_predict5(CvBoost* self, Mat* sample, Mat* missing, Range* slice, bool rawMode, bool returnSum);
float cv_CvRTrees_predict_prob(CvRTrees* self, Mat* sample, Mat* missing);
void cv_projectPoints(Mat* objectPoints, Mat* rvec, Mat* tvec, Mat* cameraMatrix, Mat* distCoeffs, Mat* imagePoints, Mat* jacobian, double aspectRatio);
void cv_CvBoost_prune(CvBoost* self, CvSlice* slice);
void cv_putText(Mat* img, string* text, Point* org, int fontFace, double fontScale, Scalar* color, int thickness, int lineType, bool bottomLeftOrigin);
void cv_pyrDown(Mat* src, Mat* dst, Size* dstsize, int borderType);
void cv_pyrMeanShiftFiltering(Mat* src, Mat* dst, double sp, double sr, int maxLevel, TermCriteria* termcrit);
void cv_pyrUp(Mat* src, Mat* dst, Size* dstsize, int borderType);
int cv_Index_radiusSearch(Index* self, Mat* query, Mat* indices, Mat* dists, double radius, int maxResults, SearchParams* params);
void cv_randShuffle_(Mat* dst, double iterFactor);
void cv_randn(Mat* dst, Mat* mean, Mat* stddev);
void cv_randu(Mat* dst, Mat* low, Mat* high);
bool cv_VideoCapture_read(VideoCapture* self, Mat* image);
void cv_rectangle(Mat* img, Point* pt1, Point* pt2, Scalar* color, int thickness, int lineType, int shift);
float cv_rectify3Collinear(Mat* cameraMatrix1, Mat* distCoeffs1, Mat* cameraMatrix2, Mat* distCoeffs2, Mat* cameraMatrix3, Mat* distCoeffs3, vector_Mat* imgpt1, vector_Mat* imgpt3, Size* imageSize, Mat* R12, Mat* T12, Mat* R13, Mat* T13, Mat* R1, Mat* R2, Mat* R3, Mat* P1, Mat* P2, Mat* P3, Mat* Q, double alpha, Size* newImgSize, Rect* roi1, Rect* roi2, int flags);
void cv_reduce(Mat* src, Mat* dst, int dim, int rtype, int dtype);
void cv_FileStorage_release(FileStorage* self);
void cv_VideoWriter_release0(VideoWriter* self);
string* cv_FileStorage_releaseAndGetString(FileStorage* self);
void cv_remap(Mat* src, Mat* dst, Mat* map1, Mat* map2, int interpolation, int borderMode, Scalar* borderValue);
void cv_repeat(Mat* src, int ny, int nx, Mat* dst);
void cv_reprojectImageTo3D(Mat* disparity, Mat* _3dImage, Mat* Q, bool handleMissingValues, int ddepth);
void cv_resize(Mat* src, Mat* dst, Size* dsize, double fx, double fy, int interpolation);
void cv_resizeWindow(string* winname, int width, int height);
bool cv_VideoCapture_retrieve(VideoCapture* self, Mat* image, int channel);
FileNode* cv_FileStorage_root(FileStorage* self, int streamidx);
int cv_Subdiv2D_rotateEdge(Subdiv2D* self, int edge, int rotate);
void cv_Index_save(Index* self, string* filename);
void cv_FaceRecognizer_save1(FaceRecognizer* self, string* filename);
void cv_HOGDescriptor_save2(HOGDescriptor* self, String* filename, String* objname);
void cv_scaleAdd(Mat* src1, double alpha, Mat* src2, Mat* dst);
void cv_segmentMotion(Mat* mhi, Mat* segmask, vector_Rect* boundingRects, double timestamp, double segThresh);
void cv_sepFilter2D(Mat* src, Mat* dst, int ddepth, Mat* kernelX, Mat* kernelY, Point* anchor, double delta, int borderType);
bool cv_VideoCapture_set(VideoCapture* self, int propId, double value);
void cv_Algorithm_setAlgorithm(Algorithm* self, string* name, Algorithm* value);
void cv_Algorithm_setBool(Algorithm* self, string* name, bool value);
void cv_CLAHE_setClipLimit(CLAHE* self, double clipLimit);
void cv_Algorithm_setDouble(Algorithm* self, string* name, double value);
void cv_setIdentity(Mat* mtx, Scalar* s);
void cv_Algorithm_setInt(Algorithm* self, string* name, int value);
void cv_Algorithm_setMat(Algorithm* self, string* name, Mat* value);
void cv_Algorithm_setMatVector(Algorithm* self, string* name, vector_Mat* value);
void cv_HOGDescriptor_setSVMDetector(HOGDescriptor* self, Mat* _svmdetector);
void cv_Algorithm_setString(Algorithm* self, string* name, string* value);
void cv_CLAHE_setTilesGridSize(CLAHE* self, Size* tileGridSize);
void cv_setTrackbarPos(string* trackbarname, string* winname, int pos);
void cv_setUseOptimized(bool onoff);
void cv_setWindowProperty(string* winname, int prop_id, double prop_value);
size_t cv_FileNode_size(FileNode* self);
bool cv_solve(Mat* src1, Mat* src2, Mat* dst, int flags);
int cv_solveCubic(Mat* coeffs, Mat* roots);
bool cv_solvePnP(Mat* objectPoints, Mat* imagePoints, Mat* cameraMatrix, Mat* distCoeffs, Mat* rvec, Mat* tvec, bool useExtrinsicGuess, int flags);
void cv_solvePnPRansac(Mat* objectPoints, Mat* imagePoints, Mat* cameraMatrix, Mat* distCoeffs, Mat* rvec, Mat* tvec, bool useExtrinsicGuess, int iterationsCount, float reprojectionError, int minInliersCount, Mat* inliers, int flags);
double cv_solvePoly(Mat* coeffs, Mat* roots, int maxIters);
void cv_sort(Mat* src, Mat* dst, int flags);
void cv_sortIdx(Mat* src, Mat* dst, int flags);
void cv_split(Mat* m, vector_Mat* mv);
void cv_sqrt(Mat* src, Mat* dst);
int cv_startWindowThread();
double cv_stereoCalibrate(vector_Mat* objectPoints, vector_Mat* imagePoints1, vector_Mat* imagePoints2, Mat* cameraMatrix1, Mat* distCoeffs1, Mat* cameraMatrix2, Mat* distCoeffs2, Size* imageSize, Mat* R, Mat* T, Mat* E, Mat* F, TermCriteria* criteria, int flags);
void cv_stereoRectify(Mat* cameraMatrix1, Mat* distCoeffs1, Mat* cameraMatrix2, Mat* distCoeffs2, Size* imageSize, Mat* R, Mat* T, Mat* R1, Mat* R2, Mat* P1, Mat* P2, Mat* Q, int flags, double alpha, Size* newImageSize, Rect* validPixROI1, Rect* validPixROI2);
bool cv_stereoRectifyUncalibrated(Mat* points1, Mat* points2, Mat* F, Size* imgSize, Mat* H1, Mat* H2, double threshold);
void cv_subtract(Mat* src1, Mat* src2, Mat* dst, Mat* mask, int dtype);
Scalar* cv_sum(Mat* src);
int cv_Subdiv2D_symEdge(Subdiv2D* self, int edge);
double cv_threshold(Mat* src, Mat* dst, double thresh, double maxval, int type);
Scalar* cv_trace(Mat* mtx);
bool cv_CvNormalBayesClassifier_train(CvNormalBayesClassifier* self, Mat* trainData, Mat* responses, Mat* varIdx, Mat* sampleIdx, bool update);
void cv_DescriptorMatcher_train0(DescriptorMatcher* self);
void cv_FaceRecognizer_train2(FaceRecognizer* self, vector_Mat* src, Mat* labels);
bool cv_EM_train4(EM* self, Mat* samples, Mat* logLikelihoods, Mat* labels, Mat* probs);
bool cv_CvSVM_train5(CvSVM* self, Mat* trainData, Mat* responses, Mat* varIdx, Mat* sampleIdx, CvSVMParams* params);
int cv_CvANN_MLP_train6(CvANN_MLP* self, Mat* inputs, Mat* outputs, Mat* sampleWeights, Mat* sampleIdx, CvANN_MLP_TrainParams* params, int flags);
bool cv_CvERTrees_train8(CvERTrees* self, Mat* trainData, int tflag, Mat* responses, Mat* varIdx, Mat* sampleIdx, Mat* varType, Mat* missingDataMask, CvRTParams* params);
bool cv_CvGBTrees_train9(CvGBTrees* self, Mat* trainData, int tflag, Mat* responses, Mat* varIdx, Mat* sampleIdx, Mat* varType, Mat* missingDataMask, CvGBTreesParams* params, bool update);
bool cv_EM_trainE(EM* self, Mat* samples, Mat* means0, Mat* covs0, Mat* weights0, Mat* logLikelihoods, Mat* labels, Mat* probs);
bool cv_EM_trainM(EM* self, Mat* samples, Mat* probs0, Mat* logLikelihoods, Mat* labels, Mat* probs);
bool cv_CvSVM_train_auto(CvSVM* self, Mat* trainData, Mat* responses, Mat* varIdx, Mat* sampleIdx, CvSVMParams* params, int k_fold, CvParamGrid* Cgrid, CvParamGrid* gammaGrid, CvParamGrid* pGrid, CvParamGrid* nuGrid, CvParamGrid* coeffGrid, CvParamGrid* degreeGrid, bool balanced);
void cv_transform(Mat* src, Mat* dst, Mat* m);
void cv_transpose(Mat* src, Mat* dst);
void cv_triangulatePoints(Mat* projMatr1, Mat* projMatr2, Mat* projPoints1, Mat* projPoints2, Mat* points4D);
int cv_FileNode_type(FileNode* self);
void cv_undistort(Mat* src, Mat* dst, Mat* cameraMatrix, Mat* distCoeffs, Mat* newCameraMatrix);
void cv_undistortPoints(Mat* src, Mat* dst, Mat* cameraMatrix, Mat* distCoeffs, Mat* R, Mat* P);
void cv_FaceRecognizer_update(FaceRecognizer* self, vector_Mat* src, Mat* labels);
void cv_updateMotionHistory(Mat* silhouette, Mat* mhi, double timestamp, double duration);
bool cv_useOptimized();
void cv_validateDisparity(Mat* disparity, Mat* cost, int minDisparity, int numberOfDisparities, int disp12MaxDisp);
void cv_vconcat(vector_Mat* src, Mat* dst);
int cv_waitKey(int delay);
void cv_warpAffine(Mat* src, Mat* dst, Mat* M, Size* dsize, int flags, int borderMode, Scalar* borderValue);
void cv_warpPerspective(Mat* src, Mat* dst, Mat* M, Size* dsize, int flags, int borderMode, Scalar* borderValue);
void cv_watershed(Mat* image, Mat* markers);
void cv_VideoWriter_write(VideoWriter* self, Mat* image);
}
#endif //__OPENCV_GENERATED_HPP